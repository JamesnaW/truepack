Greenpack: Fast, friendly serialization
GolangDFW Meetup, 2017 February 16

Jason E. Aten, Ph.D.
Computer Scientist/Gopher
j.e.aten@gmail.com

* Greenpack

- a data description language and serialization format. Like Gobs version 2.0.

- remove gray areas from the language bindings. Provides for declared schemas, sane data evolution, and more compact encoding.

- maintain easy compatibility with all the dynamic languages that already have msgpack2 support.

- a day's work to adapt an existing language binding to read greenpack: the schema are in msgpack2, and then one simply keeps a hashmap to translate between small integer <-> field names/type.

- MIT licensed. https://github.com/glycerine/greenpack

* greenpack: the main idea

.code structdef

* greenpack: the main idea 2

.code transform


* motivation Why start with [msgpack2](http://msgpack.org)?

- msgpack2 is simple, fast, and extremely portable.

- It has an implementation in every language you've heard of, and some you haven't (some 50 libraries are available).

- It has a simple and short spec.

- msgpack2 is dynamic-language friendly because it is largely self-describing.

- most significantly: the existing library github.com/tinylib/msgp is extremely well tuned, and generates Go bindings by reading your Go source.

* Problems with msgpack2

- poorly defined language binding (signed/unsigned/bitwidth of integer?)

- a.k.a. insufficiently strong typing.

- weak support for data evolution. i.e. no conflict detection, no omitempty support from the prior libraries => they crash on unexpected fields.



* Problem example

- the widely emulated C-encoder for msgpack chooses to encode signed positive integers as unsigned integers.

- This causes crashes in readers who were expected a signed integer

- which they may have originated themselves in the original struct.

- the existing practice for msgpack2 language bindings allows the data types to change as they are read and re-serialized.

- Simple copying of a serialized struct can change the types of data from signed to unsigned.

- This is horrible.



* Addressing the problems

- for language binding: strongly define the types of fields.

- simply parse from the Go source. No separate IDL, your Go code is your one source of truth.

- For efficiency and data evolution: adopt a new convention about how to encode the field names of structs. Use small integer fields.

* Addressing the problems II

- Structs are encoded in msgpack2 using maps, as usual.

- maps that represent structs are now keyed by integers.

- Rather than strings as keys

- these integers are associated with a field name and type in a (separable) schema.

- The schema is also defined and encoded in msgpack2.


* Result

- resulting binary encoding is very similar in style to protobufs/Thrift/Capn'Proto.

- However it is much more friendly to dynamic languages; e.g. R, python, zygo

- Also it is screaming fast.

* Benchmarking Reads

.code readperf

* Benchmarking Writes

.code writeperf

* Advantages and advances: pulling the best ideas from other formats

- Once we have a schema, we can be very strongly typed, and be very efficient.

- We borrow the idea of field deprecation from FlatBuffers

- For conflicting update detection, we use CapnProto's field numbering discipline
   (contiguous integers from 0..N-1).
   
- support for the `omitempty` tag

- in Greenpack, all fields are `omitempty`

- If they are empty they won't be serialized on the wire. Like FlatBuffers and Protobufs, this enables one to define a very large schema of possibilities, and then only transmit a very small (efficient) portion that is currently relevant over the wire.

* Credit to Philip Hofer

Full credit: the Greenpack code  descends from the fantastic msgpack2 code generator https://github.com/tinylib/msgp by Philip Hofer.


* deprecating fields

.code depra1

* deprecating fields II

.code depra2

* Safety rules during data evolution

- Rules for safe data changes: To preserve forwards/backwards compatible changes, you must *never remove a field* from a struct, once that field has been defined and used.

- In the example above, the `zid:"4"` tag must stay in place, to prevent someone else from ever using 4 again.

- This allows sane data forward evolution, without tears, fears, or crashing of servers.

- The fact that `struct{}` fields take up no space also means that there is no need to worry about loss of performance when deprecating.

- We retain all fields ever used for their zebra ids, and the compiled Go code wastes no extra space for the deprecated fields.

* schema details

- Precisely defined format

- see the repo for examples and details.

- https://github.com/glycerine/greenpack

*  `greenpack -msgp` as a msgpack2 code-generator

* `msg:",omitempty"` tags on struct fields

If you're using `greenpack -msgp` to generate msgpack2 serialization code, then you can use the `omitempty` tag on your struct fields.

In the following example,

type Hedgehog struct {
   Furriness string `msg:",omitempty"`
}

If Furriness is the empty string, the field will not be serialized, thus saving the space of the field name on the wire.



* It is safe to re-use structs even with `omitempty`


* `addzid` utility

The `addzid` utility (in the cmd/addzid subdir) can help you
get started. Running `addzid mysource.go` on a .go source file
will add the `zid:"0"`... fields automatically. This makes adding Greenpack
serialization to existing Go projects easy.

See https://github.com/glycerine/greenpack/blob/master/cmd/addzid/README.md
for more detail.

* What's next. New ideas.

- microschema

- handle cycles in an object graph, by detecting
  (large) repeated references and encoding pointers as object IDs.

- your idea here.

- (One idea from meetup: optional bitmap to designate set/unset field, as in flatbuffers).


