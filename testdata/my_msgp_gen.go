package testdata

// NOTE: THIS FILE WAS PRODUCED BY THE
// GREENPACK CODE GENERATION TOOL (github.com/glycerine/greenpack)
// DO NOT EDIT

import (
	"github.com/glycerine/greenpack/msgp"
)

// MSGPfieldsNotEmpty supports omitempty tags
func (z *A) MSGPfieldsNotEmpty(isempty []bool) uint32 {
	if len(isempty) == 0 {
		return 6
	}
	var fieldsInUse uint32 = 6
	isempty[2] = (len(z.Phone) == 0) // string, omitempty
	if isempty[2] {
		fieldsInUse--
	}
	isempty[3] = (z.Sibs == 0) // number, omitempty
	if isempty[3] {
		fieldsInUse--
	}

	return fieldsInUse
}

// MSGPMarshalMsg implements msgp.Marshaler
func (z *A) MSGPMarshalMsg(b []byte) (o []byte, err error) {
	if p, ok := interface{}(z).(msgp.PreSave); ok {
		p.PreSaveHook()
	}

	o = msgp.Require(b, z.MSGPMsgsize())

	// honor the omitempty tags
	var empty [6]bool
	fieldsInUse := z.fieldsNotEmpty(empty[:])
	o = msgp.AppendMapHeader(o, fieldsInUse)

	// string "name_zid00_str"
	o = append(o, 0xae, 0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x30, 0x5f, 0x73, 0x74, 0x72)
	o = msgp.AppendString(o, z.Name)
	// string "Bday_zid01_tim"
	o = append(o, 0xae, 0x42, 0x64, 0x61, 0x79, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x31, 0x5f, 0x74, 0x69, 0x6d)
	o = msgp.AppendTime(o, z.Bday)
	if !empty[2] {
		// string "phone_zid02_str"
		o = append(o, 0xaf, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x32, 0x5f, 0x73, 0x74, 0x72)
		o = msgp.AppendString(o, z.Phone)
	}

	if !empty[3] {
		// string "Sibs_zid03_int"
		o = append(o, 0xae, 0x53, 0x69, 0x62, 0x73, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x33, 0x5f, 0x69, 0x6e, 0x74)
		o = msgp.AppendInt(o, z.Sibs)
	}

	// string "GPA_zid04_f64"
	o = append(o, 0xad, 0x47, 0x50, 0x41, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x34, 0x5f, 0x66, 0x36, 0x34)
	o = msgp.AppendFloat64(o, z.GPA)
	// string "Friend_zid05_boo"
	o = append(o, 0xb0, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x35, 0x5f, 0x62, 0x6f, 0x6f)
	o = msgp.AppendBool(o, z.Friend)
	return
}

// MSGPUnmarshalMsg implements msgp.Unmarshaler
func (z *A) MSGPUnmarshalMsg(bts []byte) (o []byte, err error) {
	return z.MSGPUnmarshalMsgWithCfg(bts, nil)
}
func (z *A) MSGPUnmarshalMsgWithCfg(bts []byte, cfg *msgp.RuntimeConfig) (o []byte, err error) {
	var nbs msgp.NilBitsStack
	nbs.Init(cfg)
	var sawTopNil bool
	if msgp.IsNil(bts) {
		sawTopNil = true
		bts = nbs.PushAlwaysNil(bts[1:])
	}

	var field []byte
	_ = field
	const maxFields0zmtx = 6

	// -- templateUnmarshalMsg starts here--
	var totalEncodedFields0zmtx uint32
	if !nbs.AlwaysNil {
		totalEncodedFields0zmtx, bts, err = nbs.ReadMapHeaderBytes(bts)
		if err != nil {
			return
		}
	}
	encodedFieldsLeft0zmtx := totalEncodedFields0zmtx
	missingFieldsLeft0zmtx := maxFields0zmtx - totalEncodedFields0zmtx

	var nextMiss0zmtx int32 = -1
	var found0zmtx [maxFields0zmtx]bool
	var curField0zmtx string

doneWithStruct0zmtx:
	// First fill all the encoded fields, then
	// treat the remaining, missing fields, as Nil.
	for encodedFieldsLeft0zmtx > 0 || missingFieldsLeft0zmtx > 0 {
		//fmt.Printf("encodedFieldsLeft: %v, missingFieldsLeft: %v, found: '%v', fields: '%#v'\n", encodedFieldsLeft0zmtx, missingFieldsLeft0zmtx, msgp.ShowFound(found0zmtx[:]), unmarshalMsgFieldOrder0zmtx)
		if encodedFieldsLeft0zmtx > 0 {
			encodedFieldsLeft0zmtx--
			field, bts, err = nbs.ReadMapKeyZC(bts)
			if err != nil {
				return
			}
			curField0zmtx = msgp.UnsafeString(field)
		} else {
			//missing fields need handling
			if nextMiss0zmtx < 0 {
				// set bts to contain just mnil (0xc0)
				bts = nbs.PushAlwaysNil(bts)
				nextMiss0zmtx = 0
			}
			for nextMiss0zmtx < maxFields0zmtx && (found0zmtx[nextMiss0zmtx] || unmarshalMsgFieldSkip0zmtx[nextMiss0zmtx]) {
				nextMiss0zmtx++
			}
			if nextMiss0zmtx == maxFields0zmtx {
				// filled all the empty fields!
				break doneWithStruct0zmtx
			}
			missingFieldsLeft0zmtx--
			curField0zmtx = unmarshalMsgFieldOrder0zmtx[nextMiss0zmtx]
		}
		//fmt.Printf("switching on curField: '%v'\n", curField0zmtx)
		switch curField0zmtx {
		// -- templateUnmarshalMsg ends here --

		case "name_zid00_str":
			found0zmtx[0] = true
			z.Name, bts, err = nbs.ReadStringBytes(bts)

			if err != nil {
				return
			}
		case "Bday_zid01_tim":
			found0zmtx[1] = true
			z.Bday, bts, err = nbs.ReadTimeBytes(bts)

			if err != nil {
				return
			}
		case "phone_zid02_str":
			found0zmtx[2] = true
			z.Phone, bts, err = nbs.ReadStringBytes(bts)

			if err != nil {
				return
			}
		case "Sibs_zid03_int":
			found0zmtx[3] = true
			z.Sibs, bts, err = nbs.ReadIntBytes(bts)

			if err != nil {
				return
			}
		case "GPA_zid04_f64":
			found0zmtx[4] = true
			z.GPA, bts, err = nbs.ReadFloat64Bytes(bts)

			if err != nil {
				return
			}
		case "Friend_zid05_boo":
			found0zmtx[5] = true
			z.Friend, bts, err = nbs.ReadBoolBytes(bts)

			if err != nil {
				return
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				return
			}
		}
	}
	if nextMiss0zmtx != -1 {
		bts = nbs.PopAlwaysNil()
	}

	if sawTopNil {
		bts = nbs.PopAlwaysNil()
	}
	o = bts
	if p, ok := interface{}(z).(msgp.PostLoad); ok {
		p.PostLoadHook()
	}

	return
}

// fields of A
var unmarshalMsgFieldOrder0zmtx = []string{"name_zid00_str", "Bday_zid01_tim", "phone_zid02_str", "Sibs_zid03_int", "GPA_zid04_f64", "Friend_zid05_boo"}

var unmarshalMsgFieldSkip0zmtx = []bool{false, false, false, false, false, false}

// MSGPMsgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *A) MSGPMsgsize() (s int) {
	s = 1 + 15 + msgp.StringPrefixSize + len(z.Name) + 15 + msgp.TimeSize + 16 + msgp.StringPrefixSize + len(z.Phone) + 15 + msgp.IntSize + 14 + msgp.Float64Size + 17 + msgp.BoolSize
	return
}

// MSGPfieldsNotEmpty supports omitempty tags
func (z *Big) MSGPfieldsNotEmpty(isempty []bool) uint32 {
	return 5
}

// MSGPMarshalMsg implements msgp.Marshaler
func (z *Big) MSGPMarshalMsg(b []byte) (o []byte, err error) {
	if p, ok := interface{}(z).(msgp.PreSave); ok {
		p.PreSaveHook()
	}

	o = msgp.Require(b, z.MSGPMsgsize())
	// map header, size 5
	// string "Slice_zid00_slc"
	o = append(o, 0x85, 0xaf, 0x53, 0x6c, 0x69, 0x63, 0x65, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x30, 0x5f, 0x73, 0x6c, 0x63)
	o = msgp.AppendArrayHeader(o, uint32(len(z.Slice)))
	for zxnd := range z.Slice {
		o, err = z.Slice[zxnd].MSGPMarshalMsg(o)
		if err != nil {
			return
		}
	}
	// string "Transform_zid01_map"
	o = append(o, 0xb3, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x6f, 0x72, 0x6d, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x31, 0x5f, 0x6d, 0x61, 0x70)
	o = msgp.AppendMapHeader(o, uint32(len(z.Transform)))
	for zygj, zqon := range z.Transform {
		o = msgp.AppendInt(o, zygj)
		if zqon == nil {
			o = msgp.AppendNil(o)
		} else {
			o, err = zqon.MSGPMarshalMsg(o)
			if err != nil {
				return
			}
		}
	}
	// string "Myptr_zid02_ptr"
	o = append(o, 0xaf, 0x4d, 0x79, 0x70, 0x74, 0x72, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x32, 0x5f, 0x70, 0x74, 0x72)
	if z.Myptr == nil {
		o = msgp.AppendNil(o)
	} else {
		o, err = z.Myptr.MSGPMarshalMsg(o)
		if err != nil {
			return
		}
	}
	// string "Myarray_zid03_ary"
	o = append(o, 0xb1, 0x4d, 0x79, 0x61, 0x72, 0x72, 0x61, 0x79, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x33, 0x5f, 0x61, 0x72, 0x79)
	o = msgp.AppendArrayHeader(o, 3)
	for ztby := range z.Myarray {
		o = msgp.AppendString(o, z.Myarray[ztby])
	}
	// string "MySlice_zid04_slc"
	o = append(o, 0xb1, 0x4d, 0x79, 0x53, 0x6c, 0x69, 0x63, 0x65, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x34, 0x5f, 0x73, 0x6c, 0x63)
	o = msgp.AppendArrayHeader(o, uint32(len(z.MySlice)))
	for zaqa := range z.MySlice {
		o = msgp.AppendString(o, z.MySlice[zaqa])
	}
	return
}

// MSGPUnmarshalMsg implements msgp.Unmarshaler
func (z *Big) MSGPUnmarshalMsg(bts []byte) (o []byte, err error) {
	return z.MSGPUnmarshalMsgWithCfg(bts, nil)
}
func (z *Big) MSGPUnmarshalMsgWithCfg(bts []byte, cfg *msgp.RuntimeConfig) (o []byte, err error) {
	var nbs msgp.NilBitsStack
	nbs.Init(cfg)
	var sawTopNil bool
	if msgp.IsNil(bts) {
		sawTopNil = true
		bts = nbs.PushAlwaysNil(bts[1:])
	}

	var field []byte
	_ = field
	const maxFields1zgny = 5

	// -- templateUnmarshalMsg starts here--
	var totalEncodedFields1zgny uint32
	if !nbs.AlwaysNil {
		totalEncodedFields1zgny, bts, err = nbs.ReadMapHeaderBytes(bts)
		if err != nil {
			return
		}
	}
	encodedFieldsLeft1zgny := totalEncodedFields1zgny
	missingFieldsLeft1zgny := maxFields1zgny - totalEncodedFields1zgny

	var nextMiss1zgny int32 = -1
	var found1zgny [maxFields1zgny]bool
	var curField1zgny string

doneWithStruct1zgny:
	// First fill all the encoded fields, then
	// treat the remaining, missing fields, as Nil.
	for encodedFieldsLeft1zgny > 0 || missingFieldsLeft1zgny > 0 {
		//fmt.Printf("encodedFieldsLeft: %v, missingFieldsLeft: %v, found: '%v', fields: '%#v'\n", encodedFieldsLeft1zgny, missingFieldsLeft1zgny, msgp.ShowFound(found1zgny[:]), unmarshalMsgFieldOrder1zgny)
		if encodedFieldsLeft1zgny > 0 {
			encodedFieldsLeft1zgny--
			field, bts, err = nbs.ReadMapKeyZC(bts)
			if err != nil {
				return
			}
			curField1zgny = msgp.UnsafeString(field)
		} else {
			//missing fields need handling
			if nextMiss1zgny < 0 {
				// set bts to contain just mnil (0xc0)
				bts = nbs.PushAlwaysNil(bts)
				nextMiss1zgny = 0
			}
			for nextMiss1zgny < maxFields1zgny && (found1zgny[nextMiss1zgny] || unmarshalMsgFieldSkip1zgny[nextMiss1zgny]) {
				nextMiss1zgny++
			}
			if nextMiss1zgny == maxFields1zgny {
				// filled all the empty fields!
				break doneWithStruct1zgny
			}
			missingFieldsLeft1zgny--
			curField1zgny = unmarshalMsgFieldOrder1zgny[nextMiss1zgny]
		}
		//fmt.Printf("switching on curField: '%v'\n", curField1zgny)
		switch curField1zgny {
		// -- templateUnmarshalMsg ends here --

		case "Slice_zid00_slc":
			found1zgny[0] = true
			if nbs.AlwaysNil {
				(z.Slice) = (z.Slice)[:0]
			} else {

				var zlsh uint32
				zlsh, bts, err = nbs.ReadArrayHeaderBytes(bts)
				if err != nil {
					return
				}
				if cap(z.Slice) >= int(zlsh) {
					z.Slice = (z.Slice)[:zlsh]
				} else {
					z.Slice = make([]S2, zlsh)
				}
				for zxnd := range z.Slice {
					bts, err = z.Slice[zxnd].MSGPUnmarshalMsg(bts)
					if err != nil {
						return
					}
					if err != nil {
						return
					}
				}
			}
		case "Transform_zid01_map":
			found1zgny[1] = true
			if nbs.AlwaysNil {
				if len(z.Transform) > 0 {
					for key, _ := range z.Transform {
						delete(z.Transform, key)
					}
				}

			} else {

				var zyqa uint32
				zyqa, bts, err = nbs.ReadMapHeaderBytes(bts)
				if err != nil {
					return
				}
				if z.Transform == nil && zyqa > 0 {
					z.Transform = make(map[int]*S2, zyqa)
				} else if len(z.Transform) > 0 {
					for key, _ := range z.Transform {
						delete(z.Transform, key)
					}
				}
				for zyqa > 0 {
					var zygj int
					var zqon *S2
					zyqa--
					zygj, bts, err = nbs.ReadIntBytes(bts)
					if err != nil {
						return
					}
					if nbs.AlwaysNil {
						if zqon != nil {
							zqon.MSGPUnmarshalMsg(msgp.OnlyNilSlice)
						}
					} else {
						// not nbs.AlwaysNil
						if msgp.IsNil(bts) {
							bts = bts[1:]
							if nil != zqon {
								zqon.MSGPUnmarshalMsg(msgp.OnlyNilSlice)
							}
						} else {
							// not nbs.AlwaysNil and not IsNil(bts): have something to read

							if zqon == nil {
								zqon = new(S2)
							}
							bts, err = zqon.MSGPUnmarshalMsg(bts)
							if err != nil {
								return
							}
							if err != nil {
								return
							}
						}
					}
					z.Transform[zygj] = zqon
				}
			}
		case "Myptr_zid02_ptr":
			found1zgny[2] = true
			if nbs.AlwaysNil {
				if z.Myptr != nil {
					z.Myptr.MSGPUnmarshalMsg(msgp.OnlyNilSlice)
				}
			} else {
				// not nbs.AlwaysNil
				if msgp.IsNil(bts) {
					bts = bts[1:]
					if nil != z.Myptr {
						z.Myptr.MSGPUnmarshalMsg(msgp.OnlyNilSlice)
					}
				} else {
					// not nbs.AlwaysNil and not IsNil(bts): have something to read

					if z.Myptr == nil {
						z.Myptr = new(S2)
					}
					bts, err = z.Myptr.MSGPUnmarshalMsg(bts)
					if err != nil {
						return
					}
					if err != nil {
						return
					}
				}
			}
		case "Myarray_zid03_ary":
			found1zgny[3] = true
			var zzsq uint32
			zzsq, bts, err = nbs.ReadArrayHeaderBytes(bts)
			if err != nil {
				return
			}
			if !nbs.IsNil(bts) && zzsq != 3 {
				err = msgp.ArrayError{Wanted: 3, Got: zzsq}
				return
			}
			for ztby := range z.Myarray {
				z.Myarray[ztby], bts, err = nbs.ReadStringBytes(bts)

				if err != nil {
					return
				}
			}
		case "MySlice_zid04_slc":
			found1zgny[4] = true
			if nbs.AlwaysNil {
				(z.MySlice) = (z.MySlice)[:0]
			} else {

				var zpjy uint32
				zpjy, bts, err = nbs.ReadArrayHeaderBytes(bts)
				if err != nil {
					return
				}
				if cap(z.MySlice) >= int(zpjy) {
					z.MySlice = (z.MySlice)[:zpjy]
				} else {
					z.MySlice = make([]string, zpjy)
				}
				for zaqa := range z.MySlice {
					z.MySlice[zaqa], bts, err = nbs.ReadStringBytes(bts)

					if err != nil {
						return
					}
				}
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				return
			}
		}
	}
	if nextMiss1zgny != -1 {
		bts = nbs.PopAlwaysNil()
	}

	if sawTopNil {
		bts = nbs.PopAlwaysNil()
	}
	o = bts
	if p, ok := interface{}(z).(msgp.PostLoad); ok {
		p.PostLoadHook()
	}

	return
}

// fields of Big
var unmarshalMsgFieldOrder1zgny = []string{"Slice_zid00_slc", "Transform_zid01_map", "Myptr_zid02_ptr", "Myarray_zid03_ary", "MySlice_zid04_slc"}

var unmarshalMsgFieldSkip1zgny = []bool{false, false, false, false, false}

// MSGPMsgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *Big) MSGPMsgsize() (s int) {
	s = 1 + 16 + msgp.ArrayHeaderSize
	for zxnd := range z.Slice {
		s += z.Slice[zxnd].MSGPMsgsize()
	}
	s += 20 + msgp.MapHeaderSize
	if z.Transform != nil {
		for zygj, zqon := range z.Transform {
			_ = zqon
			_ = zygj
			s += msgp.IntSize
			if zqon == nil {
				s += msgp.NilSize
			} else {
				s += zqon.MSGPMsgsize()
			}
		}
	}
	s += 16
	if z.Myptr == nil {
		s += msgp.NilSize
	} else {
		s += z.Myptr.MSGPMsgsize()
	}
	s += 18 + msgp.ArrayHeaderSize
	for ztby := range z.Myarray {
		s += msgp.StringPrefixSize + len(z.Myarray[ztby])
	}
	s += 18 + msgp.ArrayHeaderSize
	for zaqa := range z.MySlice {
		s += msgp.StringPrefixSize + len(z.MySlice[zaqa])
	}
	return
}

// MSGPfieldsNotEmpty supports omitempty tags
func (z *S2) MSGPfieldsNotEmpty(isempty []bool) uint32 {
	return 7
}

// MSGPMarshalMsg implements msgp.Marshaler
func (z *S2) MSGPMarshalMsg(b []byte) (o []byte, err error) {
	if p, ok := interface{}(z).(msgp.PreSave); ok {
		p.PreSaveHook()
	}

	o = msgp.Require(b, z.MSGPMsgsize())
	// map header, size 7
	// string "beta_zid01_str"
	o = append(o, 0x87, 0xae, 0x62, 0x65, 0x74, 0x61, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x31, 0x5f, 0x73, 0x74, 0x72)
	o = msgp.AppendString(o, z.B)
	// string "ralph_zid02_map"
	o = append(o, 0xaf, 0x72, 0x61, 0x6c, 0x70, 0x68, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x32, 0x5f, 0x6d, 0x61, 0x70)
	o = msgp.AppendMapHeader(o, uint32(len(z.R)))
	for zubn, zfpq := range z.R {
		o = msgp.AppendString(o, zubn)
		o = msgp.AppendUint8(o, zfpq)
	}
	// string "P_zid03_u16"
	o = append(o, 0xab, 0x50, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x33, 0x5f, 0x75, 0x31, 0x36)
	o = msgp.AppendUint16(o, z.P)
	// string "Q_zid04_u32"
	o = append(o, 0xab, 0x51, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x34, 0x5f, 0x75, 0x33, 0x32)
	o = msgp.AppendUint32(o, z.Q)
	// string "T_zid05_i64"
	o = append(o, 0xab, 0x54, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x35, 0x5f, 0x69, 0x36, 0x34)
	o = msgp.AppendInt64(o, z.T)
	// string "arr_zid06_ary"
	o = append(o, 0xad, 0x61, 0x72, 0x72, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x36, 0x5f, 0x61, 0x72, 0x79)
	o = msgp.AppendArrayHeader(o, 6)
	for zokv := range z.Arr {
		o = msgp.AppendFloat64(o, z.Arr[zokv])
	}
	// string "MyTree_zid07_ptr"
	o = append(o, 0xb0, 0x4d, 0x79, 0x54, 0x72, 0x65, 0x65, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x37, 0x5f, 0x70, 0x74, 0x72)
	if z.MyTree == nil {
		o = msgp.AppendNil(o)
	} else {
		o, err = z.MyTree.MSGPMarshalMsg(o)
		if err != nil {
			return
		}
	}
	return
}

// MSGPUnmarshalMsg implements msgp.Unmarshaler
func (z *S2) MSGPUnmarshalMsg(bts []byte) (o []byte, err error) {
	return z.MSGPUnmarshalMsgWithCfg(bts, nil)
}
func (z *S2) MSGPUnmarshalMsgWithCfg(bts []byte, cfg *msgp.RuntimeConfig) (o []byte, err error) {
	var nbs msgp.NilBitsStack
	nbs.Init(cfg)
	var sawTopNil bool
	if msgp.IsNil(bts) {
		sawTopNil = true
		bts = nbs.PushAlwaysNil(bts[1:])
	}

	var field []byte
	_ = field
	const maxFields2zrjp = 8

	// -- templateUnmarshalMsg starts here--
	var totalEncodedFields2zrjp uint32
	if !nbs.AlwaysNil {
		totalEncodedFields2zrjp, bts, err = nbs.ReadMapHeaderBytes(bts)
		if err != nil {
			return
		}
	}
	encodedFieldsLeft2zrjp := totalEncodedFields2zrjp
	missingFieldsLeft2zrjp := maxFields2zrjp - totalEncodedFields2zrjp

	var nextMiss2zrjp int32 = -1
	var found2zrjp [maxFields2zrjp]bool
	var curField2zrjp string

doneWithStruct2zrjp:
	// First fill all the encoded fields, then
	// treat the remaining, missing fields, as Nil.
	for encodedFieldsLeft2zrjp > 0 || missingFieldsLeft2zrjp > 0 {
		//fmt.Printf("encodedFieldsLeft: %v, missingFieldsLeft: %v, found: '%v', fields: '%#v'\n", encodedFieldsLeft2zrjp, missingFieldsLeft2zrjp, msgp.ShowFound(found2zrjp[:]), unmarshalMsgFieldOrder2zrjp)
		if encodedFieldsLeft2zrjp > 0 {
			encodedFieldsLeft2zrjp--
			field, bts, err = nbs.ReadMapKeyZC(bts)
			if err != nil {
				return
			}
			curField2zrjp = msgp.UnsafeString(field)
		} else {
			//missing fields need handling
			if nextMiss2zrjp < 0 {
				// set bts to contain just mnil (0xc0)
				bts = nbs.PushAlwaysNil(bts)
				nextMiss2zrjp = 0
			}
			for nextMiss2zrjp < maxFields2zrjp && (found2zrjp[nextMiss2zrjp] || unmarshalMsgFieldSkip2zrjp[nextMiss2zrjp]) {
				nextMiss2zrjp++
			}
			if nextMiss2zrjp == maxFields2zrjp {
				// filled all the empty fields!
				break doneWithStruct2zrjp
			}
			missingFieldsLeft2zrjp--
			curField2zrjp = unmarshalMsgFieldOrder2zrjp[nextMiss2zrjp]
		}
		//fmt.Printf("switching on curField: '%v'\n", curField2zrjp)
		switch curField2zrjp {
		// -- templateUnmarshalMsg ends here --

		case "beta_zid01_str":
			found2zrjp[1] = true
			z.B, bts, err = nbs.ReadStringBytes(bts)

			if err != nil {
				return
			}
		case "ralph_zid02_map":
			found2zrjp[2] = true
			if nbs.AlwaysNil {
				if len(z.R) > 0 {
					for key, _ := range z.R {
						delete(z.R, key)
					}
				}

			} else {

				var zgiy uint32
				zgiy, bts, err = nbs.ReadMapHeaderBytes(bts)
				if err != nil {
					return
				}
				if z.R == nil && zgiy > 0 {
					z.R = make(map[string]uint8, zgiy)
				} else if len(z.R) > 0 {
					for key, _ := range z.R {
						delete(z.R, key)
					}
				}
				for zgiy > 0 {
					var zubn string
					var zfpq uint8
					zgiy--
					zubn, bts, err = nbs.ReadStringBytes(bts)
					if err != nil {
						return
					}
					zfpq, bts, err = nbs.ReadUint8Bytes(bts)

					if err != nil {
						return
					}
					z.R[zubn] = zfpq
				}
			}
		case "P_zid03_u16":
			found2zrjp[3] = true
			z.P, bts, err = nbs.ReadUint16Bytes(bts)

			if err != nil {
				return
			}
		case "Q_zid04_u32":
			found2zrjp[4] = true
			z.Q, bts, err = nbs.ReadUint32Bytes(bts)

			if err != nil {
				return
			}
		case "T_zid05_i64":
			found2zrjp[5] = true
			z.T, bts, err = nbs.ReadInt64Bytes(bts)

			if err != nil {
				return
			}
		case "arr_zid06_ary":
			found2zrjp[6] = true
			var zues uint32
			zues, bts, err = nbs.ReadArrayHeaderBytes(bts)
			if err != nil {
				return
			}
			if !nbs.IsNil(bts) && zues != 6 {
				err = msgp.ArrayError{Wanted: 6, Got: zues}
				return
			}
			for zokv := range z.Arr {
				z.Arr[zokv], bts, err = nbs.ReadFloat64Bytes(bts)

				if err != nil {
					return
				}
			}
		case "MyTree_zid07_ptr":
			found2zrjp[7] = true
			if nbs.AlwaysNil {
				if z.MyTree != nil {
					z.MyTree.MSGPUnmarshalMsg(msgp.OnlyNilSlice)
				}
			} else {
				// not nbs.AlwaysNil
				if msgp.IsNil(bts) {
					bts = bts[1:]
					if nil != z.MyTree {
						z.MyTree.MSGPUnmarshalMsg(msgp.OnlyNilSlice)
					}
				} else {
					// not nbs.AlwaysNil and not IsNil(bts): have something to read

					if z.MyTree == nil {
						z.MyTree = new(Tree)
					}
					bts, err = z.MyTree.MSGPUnmarshalMsg(bts)
					if err != nil {
						return
					}
					if err != nil {
						return
					}
				}
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				return
			}
		}
	}
	if nextMiss2zrjp != -1 {
		bts = nbs.PopAlwaysNil()
	}

	if sawTopNil {
		bts = nbs.PopAlwaysNil()
	}
	o = bts
	if p, ok := interface{}(z).(msgp.PostLoad); ok {
		p.PostLoadHook()
	}

	return
}

// fields of S2
var unmarshalMsgFieldOrder2zrjp = []string{"", "beta_zid01_str", "ralph_zid02_map", "P_zid03_u16", "Q_zid04_u32", "T_zid05_i64", "arr_zid06_ary", "MyTree_zid07_ptr"}

var unmarshalMsgFieldSkip2zrjp = []bool{true, false, false, false, false, false, false, false}

// MSGPMsgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *S2) MSGPMsgsize() (s int) {
	s = 1 + 15 + msgp.StringPrefixSize + len(z.B) + 16 + msgp.MapHeaderSize
	if z.R != nil {
		for zubn, zfpq := range z.R {
			_ = zfpq
			_ = zubn
			s += msgp.StringPrefixSize + len(zubn) + msgp.Uint8Size
		}
	}
	s += 12 + msgp.Uint16Size + 12 + msgp.Uint32Size + 12 + msgp.Int64Size + 14 + msgp.ArrayHeaderSize + (6 * (msgp.Float64Size)) + 17
	if z.MyTree == nil {
		s += msgp.NilSize
	} else {
		s += z.MyTree.MSGPMsgsize()
	}
	return
}

// MSGPfieldsNotEmpty supports omitempty tags
func (z Sys) MSGPfieldsNotEmpty(isempty []bool) uint32 {
	return 1
}

// MSGPMarshalMsg implements msgp.Marshaler
func (z Sys) MSGPMarshalMsg(b []byte) (o []byte, err error) {
	if p, ok := interface{}(z).(msgp.PreSave); ok {
		p.PreSaveHook()
	}

	o = msgp.Require(b, z.MSGPMsgsize())
	// map header, size 1
	// string "F_zid00_ifc"
	o = append(o, 0x81, 0xab, 0x46, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x30, 0x5f, 0x69, 0x66, 0x63)
	o, err = msgp.AppendIntf(o, z.F)
	if err != nil {
		return
	}
	return
}

// MSGPUnmarshalMsg implements msgp.Unmarshaler
func (z *Sys) MSGPUnmarshalMsg(bts []byte) (o []byte, err error) {
	return z.MSGPUnmarshalMsgWithCfg(bts, nil)
}
func (z *Sys) MSGPUnmarshalMsgWithCfg(bts []byte, cfg *msgp.RuntimeConfig) (o []byte, err error) {
	var nbs msgp.NilBitsStack
	nbs.Init(cfg)
	var sawTopNil bool
	if msgp.IsNil(bts) {
		sawTopNil = true
		bts = nbs.PushAlwaysNil(bts[1:])
	}

	var field []byte
	_ = field
	const maxFields3zquw = 1

	// -- templateUnmarshalMsg starts here--
	var totalEncodedFields3zquw uint32
	if !nbs.AlwaysNil {
		totalEncodedFields3zquw, bts, err = nbs.ReadMapHeaderBytes(bts)
		if err != nil {
			return
		}
	}
	encodedFieldsLeft3zquw := totalEncodedFields3zquw
	missingFieldsLeft3zquw := maxFields3zquw - totalEncodedFields3zquw

	var nextMiss3zquw int32 = -1
	var found3zquw [maxFields3zquw]bool
	var curField3zquw string

doneWithStruct3zquw:
	// First fill all the encoded fields, then
	// treat the remaining, missing fields, as Nil.
	for encodedFieldsLeft3zquw > 0 || missingFieldsLeft3zquw > 0 {
		//fmt.Printf("encodedFieldsLeft: %v, missingFieldsLeft: %v, found: '%v', fields: '%#v'\n", encodedFieldsLeft3zquw, missingFieldsLeft3zquw, msgp.ShowFound(found3zquw[:]), unmarshalMsgFieldOrder3zquw)
		if encodedFieldsLeft3zquw > 0 {
			encodedFieldsLeft3zquw--
			field, bts, err = nbs.ReadMapKeyZC(bts)
			if err != nil {
				return
			}
			curField3zquw = msgp.UnsafeString(field)
		} else {
			//missing fields need handling
			if nextMiss3zquw < 0 {
				// set bts to contain just mnil (0xc0)
				bts = nbs.PushAlwaysNil(bts)
				nextMiss3zquw = 0
			}
			for nextMiss3zquw < maxFields3zquw && (found3zquw[nextMiss3zquw] || unmarshalMsgFieldSkip3zquw[nextMiss3zquw]) {
				nextMiss3zquw++
			}
			if nextMiss3zquw == maxFields3zquw {
				// filled all the empty fields!
				break doneWithStruct3zquw
			}
			missingFieldsLeft3zquw--
			curField3zquw = unmarshalMsgFieldOrder3zquw[nextMiss3zquw]
		}
		//fmt.Printf("switching on curField: '%v'\n", curField3zquw)
		switch curField3zquw {
		// -- templateUnmarshalMsg ends here --

		case "F_zid00_ifc":
			found3zquw[0] = true
			z.F, bts, err = nbs.ReadIntfBytes(bts)

			if err != nil {
				return
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				return
			}
		}
	}
	if nextMiss3zquw != -1 {
		bts = nbs.PopAlwaysNil()
	}

	if sawTopNil {
		bts = nbs.PopAlwaysNil()
	}
	o = bts
	if p, ok := interface{}(z).(msgp.PostLoad); ok {
		p.PostLoadHook()
	}

	return
}

// fields of Sys
var unmarshalMsgFieldOrder3zquw = []string{"F_zid00_ifc"}

var unmarshalMsgFieldSkip3zquw = []bool{false}

// MSGPMsgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z Sys) MSGPMsgsize() (s int) {
	s = 1 + 12 + msgp.GuessSize(z.F)
	return
}

// MSGPfieldsNotEmpty supports omitempty tags
func (z *Tree) MSGPfieldsNotEmpty(isempty []bool) uint32 {
	return 3
}

// MSGPMarshalMsg implements msgp.Marshaler
func (z *Tree) MSGPMarshalMsg(b []byte) (o []byte, err error) {
	if p, ok := interface{}(z).(msgp.PreSave); ok {
		p.PreSaveHook()
	}

	o = msgp.Require(b, z.MSGPMsgsize())
	// map header, size 3
	// string "Chld_zid00_slc"
	o = append(o, 0x83, 0xae, 0x43, 0x68, 0x6c, 0x64, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x30, 0x5f, 0x73, 0x6c, 0x63)
	o = msgp.AppendArrayHeader(o, uint32(len(z.Chld)))
	for zfjm := range z.Chld {
		o, err = z.Chld[zfjm].MSGPMarshalMsg(o)
		if err != nil {
			return
		}
	}
	// string "Str_zid01_str"
	o = append(o, 0xad, 0x53, 0x74, 0x72, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x31, 0x5f, 0x73, 0x74, 0x72)
	o = msgp.AppendString(o, z.Str)
	// string "Par_zid02_ptr"
	o = append(o, 0xad, 0x50, 0x61, 0x72, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x32, 0x5f, 0x70, 0x74, 0x72)
	if z.Par == nil {
		o = msgp.AppendNil(o)
	} else {
		o, err = z.Par.MSGPMarshalMsg(o)
		if err != nil {
			return
		}
	}
	return
}

// MSGPUnmarshalMsg implements msgp.Unmarshaler
func (z *Tree) MSGPUnmarshalMsg(bts []byte) (o []byte, err error) {
	return z.MSGPUnmarshalMsgWithCfg(bts, nil)
}
func (z *Tree) MSGPUnmarshalMsgWithCfg(bts []byte, cfg *msgp.RuntimeConfig) (o []byte, err error) {
	var nbs msgp.NilBitsStack
	nbs.Init(cfg)
	var sawTopNil bool
	if msgp.IsNil(bts) {
		sawTopNil = true
		bts = nbs.PushAlwaysNil(bts[1:])
	}

	var field []byte
	_ = field
	const maxFields4zbsy = 3

	// -- templateUnmarshalMsg starts here--
	var totalEncodedFields4zbsy uint32
	if !nbs.AlwaysNil {
		totalEncodedFields4zbsy, bts, err = nbs.ReadMapHeaderBytes(bts)
		if err != nil {
			return
		}
	}
	encodedFieldsLeft4zbsy := totalEncodedFields4zbsy
	missingFieldsLeft4zbsy := maxFields4zbsy - totalEncodedFields4zbsy

	var nextMiss4zbsy int32 = -1
	var found4zbsy [maxFields4zbsy]bool
	var curField4zbsy string

doneWithStruct4zbsy:
	// First fill all the encoded fields, then
	// treat the remaining, missing fields, as Nil.
	for encodedFieldsLeft4zbsy > 0 || missingFieldsLeft4zbsy > 0 {
		//fmt.Printf("encodedFieldsLeft: %v, missingFieldsLeft: %v, found: '%v', fields: '%#v'\n", encodedFieldsLeft4zbsy, missingFieldsLeft4zbsy, msgp.ShowFound(found4zbsy[:]), unmarshalMsgFieldOrder4zbsy)
		if encodedFieldsLeft4zbsy > 0 {
			encodedFieldsLeft4zbsy--
			field, bts, err = nbs.ReadMapKeyZC(bts)
			if err != nil {
				return
			}
			curField4zbsy = msgp.UnsafeString(field)
		} else {
			//missing fields need handling
			if nextMiss4zbsy < 0 {
				// set bts to contain just mnil (0xc0)
				bts = nbs.PushAlwaysNil(bts)
				nextMiss4zbsy = 0
			}
			for nextMiss4zbsy < maxFields4zbsy && (found4zbsy[nextMiss4zbsy] || unmarshalMsgFieldSkip4zbsy[nextMiss4zbsy]) {
				nextMiss4zbsy++
			}
			if nextMiss4zbsy == maxFields4zbsy {
				// filled all the empty fields!
				break doneWithStruct4zbsy
			}
			missingFieldsLeft4zbsy--
			curField4zbsy = unmarshalMsgFieldOrder4zbsy[nextMiss4zbsy]
		}
		//fmt.Printf("switching on curField: '%v'\n", curField4zbsy)
		switch curField4zbsy {
		// -- templateUnmarshalMsg ends here --

		case "Chld_zid00_slc":
			found4zbsy[0] = true
			if nbs.AlwaysNil {
				(z.Chld) = (z.Chld)[:0]
			} else {

				var zxgh uint32
				zxgh, bts, err = nbs.ReadArrayHeaderBytes(bts)
				if err != nil {
					return
				}
				if cap(z.Chld) >= int(zxgh) {
					z.Chld = (z.Chld)[:zxgh]
				} else {
					z.Chld = make([]Tree, zxgh)
				}
				for zfjm := range z.Chld {
					bts, err = z.Chld[zfjm].MSGPUnmarshalMsg(bts)
					if err != nil {
						return
					}
					if err != nil {
						return
					}
				}
			}
		case "Str_zid01_str":
			found4zbsy[1] = true
			z.Str, bts, err = nbs.ReadStringBytes(bts)

			if err != nil {
				return
			}
		case "Par_zid02_ptr":
			found4zbsy[2] = true
			if nbs.AlwaysNil {
				if z.Par != nil {
					z.Par.MSGPUnmarshalMsg(msgp.OnlyNilSlice)
				}
			} else {
				// not nbs.AlwaysNil
				if msgp.IsNil(bts) {
					bts = bts[1:]
					if nil != z.Par {
						z.Par.MSGPUnmarshalMsg(msgp.OnlyNilSlice)
					}
				} else {
					// not nbs.AlwaysNil and not IsNil(bts): have something to read

					if z.Par == nil {
						z.Par = new(S2)
					}
					bts, err = z.Par.MSGPUnmarshalMsg(bts)
					if err != nil {
						return
					}
					if err != nil {
						return
					}
				}
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				return
			}
		}
	}
	if nextMiss4zbsy != -1 {
		bts = nbs.PopAlwaysNil()
	}

	if sawTopNil {
		bts = nbs.PopAlwaysNil()
	}
	o = bts
	if p, ok := interface{}(z).(msgp.PostLoad); ok {
		p.PostLoadHook()
	}

	return
}

// fields of Tree
var unmarshalMsgFieldOrder4zbsy = []string{"Chld_zid00_slc", "Str_zid01_str", "Par_zid02_ptr"}

var unmarshalMsgFieldSkip4zbsy = []bool{false, false, false}

// MSGPMsgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *Tree) MSGPMsgsize() (s int) {
	s = 1 + 15 + msgp.ArrayHeaderSize
	for zfjm := range z.Chld {
		s += z.Chld[zfjm].MSGPMsgsize()
	}
	s += 14 + msgp.StringPrefixSize + len(z.Str) + 14
	if z.Par == nil {
		s += msgp.NilSize
	} else {
		s += z.Par.MSGPMsgsize()
	}
	return
}

// FileMy_msgp holds Greenpack schema from file 'testdata/my.go'
type FileMy_msgp struct{}

// MSGPGreenSchemaInMsgpack2Format provides the Greenpack Schema in msgpack2 format, length 4450 bytes
func (FileMy_msgp) MSGPGreenSchemaInMsgpack2Format() []byte {
	return []byte{
		0x85, 0xaf, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x50, 0x61,
		0x74, 0x68, 0x5f, 0x5f, 0x73, 0x74, 0x72, 0xae, 0x74, 0x65,
		0x73, 0x74, 0x64, 0x61, 0x74, 0x61, 0x2f, 0x6d, 0x79, 0x2e,
		0x67, 0x6f, 0xb2, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x50,
		0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x5f, 0x5f, 0x73, 0x74,
		0x72, 0xa8, 0x74, 0x65, 0x73, 0x74, 0x64, 0x61, 0x74, 0x61,
		0xb2, 0x47, 0x72, 0x65, 0x65, 0x6e, 0x53, 0x63, 0x68, 0x65,
		0x6d, 0x61, 0x49, 0x64, 0x5f, 0x5f, 0x69, 0x36, 0x34, 0x00,
		0xac, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x73, 0x5f, 0x5f,
		0x6d, 0x61, 0x70, 0x85, 0xa2, 0x53, 0x32, 0x82, 0xaf, 0x53,
		0x74, 0x72, 0x75, 0x63, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x5f,
		0x5f, 0x73, 0x74, 0x72, 0xa2, 0x53, 0x32, 0xab, 0x46, 0x69,
		0x65, 0x6c, 0x64, 0x73, 0x5f, 0x5f, 0x73, 0x6c, 0x63, 0x98,
		0x84, 0xa8, 0x5a, 0x69, 0x64, 0x5f, 0x5f, 0x69, 0x36, 0x34,
		0x00, 0xb0, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x47, 0x6f, 0x4e,
		0x61, 0x6d, 0x65, 0x5f, 0x5f, 0x73, 0x74, 0x72, 0xa1, 0x41,
		0xb1, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x54, 0x61, 0x67, 0x4e,
		0x61, 0x6d, 0x65, 0x5f, 0x5f, 0x73, 0x74, 0x72, 0xa5, 0x61,
		0x6c, 0x70, 0x68, 0x61, 0xa9, 0x53, 0x6b, 0x69, 0x70, 0x5f,
		0x5f, 0x62, 0x6f, 0x6f, 0xc3, 0x87, 0xa8, 0x5a, 0x69, 0x64,
		0x5f, 0x5f, 0x69, 0x36, 0x34, 0x01, 0xb0, 0x46, 0x69, 0x65,
		0x6c, 0x64, 0x47, 0x6f, 0x4e, 0x61, 0x6d, 0x65, 0x5f, 0x5f,
		0x73, 0x74, 0x72, 0xa1, 0x42, 0xb1, 0x46, 0x69, 0x65, 0x6c,
		0x64, 0x54, 0x61, 0x67, 0x4e, 0x61, 0x6d, 0x65, 0x5f, 0x5f,
		0x73, 0x74, 0x72, 0xa4, 0x62, 0x65, 0x74, 0x61, 0xb1, 0x46,
		0x69, 0x65, 0x6c, 0x64, 0x54, 0x79, 0x70, 0x65, 0x53, 0x74,
		0x72, 0x5f, 0x5f, 0x73, 0x74, 0x72, 0xa6, 0x73, 0x74, 0x72,
		0x69, 0x6e, 0x67, 0xaf, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x43,
		0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x5f, 0x5f, 0x17,
		0xb0, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x50, 0x72, 0x69, 0x6d,
		0x69, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x5f, 0x02, 0xb2, 0x46,
		0x69, 0x65, 0x6c, 0x64, 0x46, 0x75, 0x6c, 0x6c, 0x54, 0x79,
		0x70, 0x65, 0x5f, 0x5f, 0x70, 0x74, 0x72, 0x82, 0xa6, 0x4b,
		0x69, 0x6e, 0x64, 0x5f, 0x5f, 0x02, 0xa8, 0x53, 0x74, 0x72,
		0x5f, 0x5f, 0x73, 0x74, 0x72, 0xa6, 0x73, 0x74, 0x72, 0x69,
		0x6e, 0x67, 0x86, 0xa8, 0x5a, 0x69, 0x64, 0x5f, 0x5f, 0x69,
		0x36, 0x34, 0x02, 0xb0, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x47,
		0x6f, 0x4e, 0x61, 0x6d, 0x65, 0x5f, 0x5f, 0x73, 0x74, 0x72,
		0xa1, 0x52, 0xb1, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x54, 0x61,
		0x67, 0x4e, 0x61, 0x6d, 0x65, 0x5f, 0x5f, 0x73, 0x74, 0x72,
		0xa5, 0x72, 0x61, 0x6c, 0x70, 0x68, 0xb1, 0x46, 0x69, 0x65,
		0x6c, 0x64, 0x54, 0x79, 0x70, 0x65, 0x53, 0x74, 0x72, 0x5f,
		0x5f, 0x73, 0x74, 0x72, 0xb0, 0x6d, 0x61, 0x70, 0x5b, 0x73,
		0x74, 0x72, 0x69, 0x6e, 0x67, 0x5d, 0x75, 0x69, 0x6e, 0x74,
		0x38, 0xaf, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x43, 0x61, 0x74,
		0x65, 0x67, 0x6f, 0x72, 0x79, 0x5f, 0x5f, 0x18, 0xb2, 0x46,
		0x69, 0x65, 0x6c, 0x64, 0x46, 0x75, 0x6c, 0x6c, 0x54, 0x79,
		0x70, 0x65, 0x5f, 0x5f, 0x70, 0x74, 0x72, 0x84, 0xa6, 0x4b,
		0x69, 0x6e, 0x64, 0x5f, 0x5f, 0x18, 0xa8, 0x53, 0x74, 0x72,
		0x5f, 0x5f, 0x73, 0x74, 0x72, 0xa3, 0x4d, 0x61, 0x70, 0xab,
		0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x5f, 0x5f, 0x70, 0x74,
		0x72, 0x82, 0xa6, 0x4b, 0x69, 0x6e, 0x64, 0x5f, 0x5f, 0x02,
		0xa8, 0x53, 0x74, 0x72, 0x5f, 0x5f, 0x73, 0x74, 0x72, 0xa6,
		0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0xaa, 0x52, 0x61, 0x6e,
		0x67, 0x65, 0x5f, 0x5f, 0x70, 0x74, 0x72, 0x82, 0xa6, 0x4b,
		0x69, 0x6e, 0x64, 0x5f, 0x5f, 0x08, 0xa8, 0x53, 0x74, 0x72,
		0x5f, 0x5f, 0x73, 0x74, 0x72, 0xa5, 0x75, 0x69, 0x6e, 0x74,
		0x38, 0x88, 0xa8, 0x5a, 0x69, 0x64, 0x5f, 0x5f, 0x69, 0x36,
		0x34, 0x03, 0xb0, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x47, 0x6f,
		0x4e, 0x61, 0x6d, 0x65, 0x5f, 0x5f, 0x73, 0x74, 0x72, 0xa1,
		0x50, 0xb1, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x54, 0x61, 0x67,
		0x4e, 0x61, 0x6d, 0x65, 0x5f, 0x5f, 0x73, 0x74, 0x72, 0xa1,
		0x50, 0xb1, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x54, 0x79, 0x70,
		0x65, 0x53, 0x74, 0x72, 0x5f, 0x5f, 0x73, 0x74, 0x72, 0xa6,
		0x75, 0x69, 0x6e, 0x74, 0x31, 0x36, 0xaf, 0x46, 0x69, 0x65,
		0x6c, 0x64, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79,
		0x5f, 0x5f, 0x17, 0xb0, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x50,
		0x72, 0x69, 0x6d, 0x69, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x5f,
		0x09, 0xb2, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x46, 0x75, 0x6c,
		0x6c, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x5f, 0x70, 0x74, 0x72,
		0x82, 0xa6, 0x4b, 0x69, 0x6e, 0x64, 0x5f, 0x5f, 0x09, 0xa8,
		0x53, 0x74, 0x72, 0x5f, 0x5f, 0x73, 0x74, 0x72, 0xa6, 0x75,
		0x69, 0x6e, 0x74, 0x31, 0x36, 0xaf, 0x44, 0x65, 0x70, 0x72,
		0x65, 0x63, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x5f, 0x62, 0x6f,
		0x6f, 0xc3, 0x87, 0xa8, 0x5a, 0x69, 0x64, 0x5f, 0x5f, 0x69,
		0x36, 0x34, 0x04, 0xb0, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x47,
		0x6f, 0x4e, 0x61, 0x6d, 0x65, 0x5f, 0x5f, 0x73, 0x74, 0x72,
		0xa1, 0x51, 0xb1, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x54, 0x61,
		0x67, 0x4e, 0x61, 0x6d, 0x65, 0x5f, 0x5f, 0x73, 0x74, 0x72,
		0xa1, 0x51, 0xb1, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x54, 0x79,
		0x70, 0x65, 0x53, 0x74, 0x72, 0x5f, 0x5f, 0x73, 0x74, 0x72,
		0xa6, 0x75, 0x69, 0x6e, 0x74, 0x33, 0x32, 0xaf, 0x46, 0x69,
		0x65, 0x6c, 0x64, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72,
		0x79, 0x5f, 0x5f, 0x17, 0xb0, 0x46, 0x69, 0x65, 0x6c, 0x64,
		0x50, 0x72, 0x69, 0x6d, 0x69, 0x74, 0x69, 0x76, 0x65, 0x5f,
		0x5f, 0x0a, 0xb2, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x46, 0x75,
		0x6c, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x5f, 0x70, 0x74,
		0x72, 0x82, 0xa6, 0x4b, 0x69, 0x6e, 0x64, 0x5f, 0x5f, 0x0a,
		0xa8, 0x53, 0x74, 0x72, 0x5f, 0x5f, 0x73, 0x74, 0x72, 0xa6,
		0x75, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x88, 0xa8, 0x5a, 0x69,
		0x64, 0x5f, 0x5f, 0x69, 0x36, 0x34, 0x05, 0xb0, 0x46, 0x69,
		0x65, 0x6c, 0x64, 0x47, 0x6f, 0x4e, 0x61, 0x6d, 0x65, 0x5f,
		0x5f, 0x73, 0x74, 0x72, 0xa1, 0x54, 0xb1, 0x46, 0x69, 0x65,
		0x6c, 0x64, 0x54, 0x61, 0x67, 0x4e, 0x61, 0x6d, 0x65, 0x5f,
		0x5f, 0x73, 0x74, 0x72, 0xa1, 0x54, 0xb1, 0x46, 0x69, 0x65,
		0x6c, 0x64, 0x54, 0x79, 0x70, 0x65, 0x53, 0x74, 0x72, 0x5f,
		0x5f, 0x73, 0x74, 0x72, 0xa5, 0x69, 0x6e, 0x74, 0x36, 0x34,
		0xaf, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x43, 0x61, 0x74, 0x65,
		0x67, 0x6f, 0x72, 0x79, 0x5f, 0x5f, 0x17, 0xb0, 0x46, 0x69,
		0x65, 0x6c, 0x64, 0x50, 0x72, 0x69, 0x6d, 0x69, 0x74, 0x69,
		0x76, 0x65, 0x5f, 0x5f, 0x11, 0xb2, 0x46, 0x69, 0x65, 0x6c,
		0x64, 0x46, 0x75, 0x6c, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x5f,
		0x5f, 0x70, 0x74, 0x72, 0x82, 0xa6, 0x4b, 0x69, 0x6e, 0x64,
		0x5f, 0x5f, 0x11, 0xa8, 0x53, 0x74, 0x72, 0x5f, 0x5f, 0x73,
		0x74, 0x72, 0xa5, 0x69, 0x6e, 0x74, 0x36, 0x34, 0xad, 0x53,
		0x68, 0x6f, 0x77, 0x5a, 0x65, 0x72, 0x6f, 0x5f, 0x5f, 0x62,
		0x6f, 0x6f, 0xc3, 0x86, 0xa8, 0x5a, 0x69, 0x64, 0x5f, 0x5f,
		0x69, 0x36, 0x34, 0x06, 0xb0, 0x46, 0x69, 0x65, 0x6c, 0x64,
		0x47, 0x6f, 0x4e, 0x61, 0x6d, 0x65, 0x5f, 0x5f, 0x73, 0x74,
		0x72, 0xa3, 0x41, 0x72, 0x72, 0xb1, 0x46, 0x69, 0x65, 0x6c,
		0x64, 0x54, 0x61, 0x67, 0x4e, 0x61, 0x6d, 0x65, 0x5f, 0x5f,
		0x73, 0x74, 0x72, 0xa3, 0x61, 0x72, 0x72, 0xb1, 0x46, 0x69,
		0x65, 0x6c, 0x64, 0x54, 0x79, 0x70, 0x65, 0x53, 0x74, 0x72,
		0x5f, 0x5f, 0x73, 0x74, 0x72, 0xd9, 0x21, 0x5b, 0x6d, 0x73,
		0x67, 0x70, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69,
		0x6f, 0x6e, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x53, 0x69,
		0x7a, 0x65, 0x5d, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x36, 0x34,
		0xaf, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x43, 0x61, 0x74, 0x65,
		0x67, 0x6f, 0x72, 0x79, 0x5f, 0x5f, 0x1b, 0xb2, 0x46, 0x69,
		0x65, 0x6c, 0x64, 0x46, 0x75, 0x6c, 0x6c, 0x54, 0x79, 0x70,
		0x65, 0x5f, 0x5f, 0x70, 0x74, 0x72, 0x84, 0xa6, 0x4b, 0x69,
		0x6e, 0x64, 0x5f, 0x5f, 0x1b, 0xa8, 0x53, 0x74, 0x72, 0x5f,
		0x5f, 0x73, 0x74, 0x72, 0xa5, 0x41, 0x72, 0x72, 0x61, 0x79,
		0xab, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x5f, 0x5f, 0x70,
		0x74, 0x72, 0x82, 0xa6, 0x4b, 0x69, 0x6e, 0x64, 0x5f, 0x5f,
		0x06, 0xa8, 0x53, 0x74, 0x72, 0x5f, 0x5f, 0x73, 0x74, 0x72,
		0xb8, 0x6d, 0x73, 0x67, 0x70, 0x2e, 0x45, 0x78, 0x74, 0x65,
		0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x65, 0x66, 0x69,
		0x78, 0x53, 0x69, 0x7a, 0x65, 0xaa, 0x52, 0x61, 0x6e, 0x67,
		0x65, 0x5f, 0x5f, 0x70, 0x74, 0x72, 0x82, 0xa6, 0x4b, 0x69,
		0x6e, 0x64, 0x5f, 0x5f, 0x04, 0xa8, 0x53, 0x74, 0x72, 0x5f,
		0x5f, 0x73, 0x74, 0x72, 0xa7, 0x66, 0x6c, 0x6f, 0x61, 0x74,
		0x36, 0x34, 0x86, 0xa8, 0x5a, 0x69, 0x64, 0x5f, 0x5f, 0x69,
		0x36, 0x34, 0x07, 0xb0, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x47,
		0x6f, 0x4e, 0x61, 0x6d, 0x65, 0x5f, 0x5f, 0x73, 0x74, 0x72,
		0xa6, 0x4d, 0x79, 0x54, 0x72, 0x65, 0x65, 0xb1, 0x46, 0x69,
		0x65, 0x6c, 0x64, 0x54, 0x61, 0x67, 0x4e, 0x61, 0x6d, 0x65,
		0x5f, 0x5f, 0x73, 0x74, 0x72, 0xa6, 0x4d, 0x79, 0x54, 0x72,
		0x65, 0x65, 0xb1, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x54, 0x79,
		0x70, 0x65, 0x53, 0x74, 0x72, 0x5f, 0x5f, 0x73, 0x74, 0x72,
		0xa5, 0x2a, 0x54, 0x72, 0x65, 0x65, 0xaf, 0x46, 0x69, 0x65,
		0x6c, 0x64, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79,
		0x5f, 0x5f, 0x1c, 0xb2, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x46,
		0x75, 0x6c, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x5f, 0x70,
		0x74, 0x72, 0x83, 0xa6, 0x4b, 0x69, 0x6e, 0x64, 0x5f, 0x5f,
		0x1c, 0xa8, 0x53, 0x74, 0x72, 0x5f, 0x5f, 0x73, 0x74, 0x72,
		0xa7, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0xab, 0x44,
		0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x5f, 0x5f, 0x70, 0x74, 0x72,
		0x82, 0xa6, 0x4b, 0x69, 0x6e, 0x64, 0x5f, 0x5f, 0x16, 0xa8,
		0x53, 0x74, 0x72, 0x5f, 0x5f, 0x73, 0x74, 0x72, 0xa4, 0x54,
		0x72, 0x65, 0x65, 0xa4, 0x54, 0x72, 0x65, 0x65, 0x82, 0xaf,
		0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x4e, 0x61, 0x6d, 0x65,
		0x5f, 0x5f, 0x73, 0x74, 0x72, 0xa4, 0x54, 0x72, 0x65, 0x65,
		0xab, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x5f, 0x5f, 0x73,
		0x6c, 0x63, 0x93, 0x86, 0xa8, 0x5a, 0x69, 0x64, 0x5f, 0x5f,
		0x69, 0x36, 0x34, 0x00, 0xb0, 0x46, 0x69, 0x65, 0x6c, 0x64,
		0x47, 0x6f, 0x4e, 0x61, 0x6d, 0x65, 0x5f, 0x5f, 0x73, 0x74,
		0x72, 0xa4, 0x43, 0x68, 0x6c, 0x64, 0xb1, 0x46, 0x69, 0x65,
		0x6c, 0x64, 0x54, 0x61, 0x67, 0x4e, 0x61, 0x6d, 0x65, 0x5f,
		0x5f, 0x73, 0x74, 0x72, 0xa4, 0x43, 0x68, 0x6c, 0x64, 0xb1,
		0x46, 0x69, 0x65, 0x6c, 0x64, 0x54, 0x79, 0x70, 0x65, 0x53,
		0x74, 0x72, 0x5f, 0x5f, 0x73, 0x74, 0x72, 0xa6, 0x5b, 0x5d,
		0x54, 0x72, 0x65, 0x65, 0xaf, 0x46, 0x69, 0x65, 0x6c, 0x64,
		0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x5f, 0x5f,
		0x1a, 0xb2, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x46, 0x75, 0x6c,
		0x6c, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x5f, 0x70, 0x74, 0x72,
		0x83, 0xa6, 0x4b, 0x69, 0x6e, 0x64, 0x5f, 0x5f, 0x1a, 0xa8,
		0x53, 0x74, 0x72, 0x5f, 0x5f, 0x73, 0x74, 0x72, 0xa5, 0x53,
		0x6c, 0x69, 0x63, 0x65, 0xab, 0x44, 0x6f, 0x6d, 0x61, 0x69,
		0x6e, 0x5f, 0x5f, 0x70, 0x74, 0x72, 0x82, 0xa6, 0x4b, 0x69,
		0x6e, 0x64, 0x5f, 0x5f, 0x16, 0xa8, 0x53, 0x74, 0x72, 0x5f,
		0x5f, 0x73, 0x74, 0x72, 0xa4, 0x54, 0x72, 0x65, 0x65, 0x87,
		0xa8, 0x5a, 0x69, 0x64, 0x5f, 0x5f, 0x69, 0x36, 0x34, 0x01,
		0xb0, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x47, 0x6f, 0x4e, 0x61,
		0x6d, 0x65, 0x5f, 0x5f, 0x73, 0x74, 0x72, 0xa3, 0x53, 0x74,
		0x72, 0xb1, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x54, 0x61, 0x67,
		0x4e, 0x61, 0x6d, 0x65, 0x5f, 0x5f, 0x73, 0x74, 0x72, 0xa3,
		0x53, 0x74, 0x72, 0xb1, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x54,
		0x79, 0x70, 0x65, 0x53, 0x74, 0x72, 0x5f, 0x5f, 0x73, 0x74,
		0x72, 0xa6, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0xaf, 0x46,
		0x69, 0x65, 0x6c, 0x64, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f,
		0x72, 0x79, 0x5f, 0x5f, 0x17, 0xb0, 0x46, 0x69, 0x65, 0x6c,
		0x64, 0x50, 0x72, 0x69, 0x6d, 0x69, 0x74, 0x69, 0x76, 0x65,
		0x5f, 0x5f, 0x02, 0xb2, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x46,
		0x75, 0x6c, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x5f, 0x70,
		0x74, 0x72, 0x82, 0xa6, 0x4b, 0x69, 0x6e, 0x64, 0x5f, 0x5f,
		0x02, 0xa8, 0x53, 0x74, 0x72, 0x5f, 0x5f, 0x73, 0x74, 0x72,
		0xa6, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x86, 0xa8, 0x5a,
		0x69, 0x64, 0x5f, 0x5f, 0x69, 0x36, 0x34, 0x02, 0xb0, 0x46,
		0x69, 0x65, 0x6c, 0x64, 0x47, 0x6f, 0x4e, 0x61, 0x6d, 0x65,
		0x5f, 0x5f, 0x73, 0x74, 0x72, 0xa3, 0x50, 0x61, 0x72, 0xb1,
		0x46, 0x69, 0x65, 0x6c, 0x64, 0x54, 0x61, 0x67, 0x4e, 0x61,
		0x6d, 0x65, 0x5f, 0x5f, 0x73, 0x74, 0x72, 0xa3, 0x50, 0x61,
		0x72, 0xb1, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x54, 0x79, 0x70,
		0x65, 0x53, 0x74, 0x72, 0x5f, 0x5f, 0x73, 0x74, 0x72, 0xa3,
		0x2a, 0x53, 0x32, 0xaf, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x43,
		0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x5f, 0x5f, 0x1c,
		0xb2, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x46, 0x75, 0x6c, 0x6c,
		0x54, 0x79, 0x70, 0x65, 0x5f, 0x5f, 0x70, 0x74, 0x72, 0x83,
		0xa6, 0x4b, 0x69, 0x6e, 0x64, 0x5f, 0x5f, 0x1c, 0xa8, 0x53,
		0x74, 0x72, 0x5f, 0x5f, 0x73, 0x74, 0x72, 0xa7, 0x50, 0x6f,
		0x69, 0x6e, 0x74, 0x65, 0x72, 0xab, 0x44, 0x6f, 0x6d, 0x61,
		0x69, 0x6e, 0x5f, 0x5f, 0x70, 0x74, 0x72, 0x82, 0xa6, 0x4b,
		0x69, 0x6e, 0x64, 0x5f, 0x5f, 0x16, 0xa8, 0x53, 0x74, 0x72,
		0x5f, 0x5f, 0x73, 0x74, 0x72, 0xa2, 0x53, 0x32, 0xa3, 0x42,
		0x69, 0x67, 0x82, 0xaf, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74,
		0x4e, 0x61, 0x6d, 0x65, 0x5f, 0x5f, 0x73, 0x74, 0x72, 0xa3,
		0x42, 0x69, 0x67, 0xab, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73,
		0x5f, 0x5f, 0x73, 0x6c, 0x63, 0x95, 0x87, 0xa8, 0x5a, 0x69,
		0x64, 0x5f, 0x5f, 0x69, 0x36, 0x34, 0x00, 0xb0, 0x46, 0x69,
		0x65, 0x6c, 0x64, 0x47, 0x6f, 0x4e, 0x61, 0x6d, 0x65, 0x5f,
		0x5f, 0x73, 0x74, 0x72, 0xa5, 0x53, 0x6c, 0x69, 0x63, 0x65,
		0xb1, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x54, 0x61, 0x67, 0x4e,
		0x61, 0x6d, 0x65, 0x5f, 0x5f, 0x73, 0x74, 0x72, 0xa5, 0x53,
		0x6c, 0x69, 0x63, 0x65, 0xb1, 0x46, 0x69, 0x65, 0x6c, 0x64,
		0x54, 0x79, 0x70, 0x65, 0x53, 0x74, 0x72, 0x5f, 0x5f, 0x73,
		0x74, 0x72, 0xa4, 0x5b, 0x5d, 0x53, 0x32, 0xaf, 0x46, 0x69,
		0x65, 0x6c, 0x64, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72,
		0x79, 0x5f, 0x5f, 0x1a, 0xb2, 0x46, 0x69, 0x65, 0x6c, 0x64,
		0x46, 0x75, 0x6c, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x5f,
		0x70, 0x74, 0x72, 0x83, 0xa6, 0x4b, 0x69, 0x6e, 0x64, 0x5f,
		0x5f, 0x1a, 0xa8, 0x53, 0x74, 0x72, 0x5f, 0x5f, 0x73, 0x74,
		0x72, 0xa5, 0x53, 0x6c, 0x69, 0x63, 0x65, 0xab, 0x44, 0x6f,
		0x6d, 0x61, 0x69, 0x6e, 0x5f, 0x5f, 0x70, 0x74, 0x72, 0x82,
		0xa6, 0x4b, 0x69, 0x6e, 0x64, 0x5f, 0x5f, 0x16, 0xa8, 0x53,
		0x74, 0x72, 0x5f, 0x5f, 0x73, 0x74, 0x72, 0xa2, 0x53, 0x32,
		0xad, 0x53, 0x68, 0x6f, 0x77, 0x5a, 0x65, 0x72, 0x6f, 0x5f,
		0x5f, 0x62, 0x6f, 0x6f, 0xc3, 0x87, 0xa8, 0x5a, 0x69, 0x64,
		0x5f, 0x5f, 0x69, 0x36, 0x34, 0x01, 0xb0, 0x46, 0x69, 0x65,
		0x6c, 0x64, 0x47, 0x6f, 0x4e, 0x61, 0x6d, 0x65, 0x5f, 0x5f,
		0x73, 0x74, 0x72, 0xa9, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66,
		0x6f, 0x72, 0x6d, 0xb1, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x54,
		0x61, 0x67, 0x4e, 0x61, 0x6d, 0x65, 0x5f, 0x5f, 0x73, 0x74,
		0x72, 0xa9, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x6f, 0x72,
		0x6d, 0xb1, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x54, 0x79, 0x70,
		0x65, 0x53, 0x74, 0x72, 0x5f, 0x5f, 0x73, 0x74, 0x72, 0xab,
		0x6d, 0x61, 0x70, 0x5b, 0x69, 0x6e, 0x74, 0x5d, 0x2a, 0x53,
		0x32, 0xaf, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x43, 0x61, 0x74,
		0x65, 0x67, 0x6f, 0x72, 0x79, 0x5f, 0x5f, 0x18, 0xb2, 0x46,
		0x69, 0x65, 0x6c, 0x64, 0x46, 0x75, 0x6c, 0x6c, 0x54, 0x79,
		0x70, 0x65, 0x5f, 0x5f, 0x70, 0x74, 0x72, 0x84, 0xa6, 0x4b,
		0x69, 0x6e, 0x64, 0x5f, 0x5f, 0x18, 0xa8, 0x53, 0x74, 0x72,
		0x5f, 0x5f, 0x73, 0x74, 0x72, 0xa3, 0x4d, 0x61, 0x70, 0xab,
		0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x5f, 0x5f, 0x70, 0x74,
		0x72, 0x82, 0xa6, 0x4b, 0x69, 0x6e, 0x64, 0x5f, 0x5f, 0x0d,
		0xa8, 0x53, 0x74, 0x72, 0x5f, 0x5f, 0x73, 0x74, 0x72, 0xa3,
		0x69, 0x6e, 0x74, 0xaa, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x5f,
		0x5f, 0x70, 0x74, 0x72, 0x83, 0xa6, 0x4b, 0x69, 0x6e, 0x64,
		0x5f, 0x5f, 0x1c, 0xa8, 0x53, 0x74, 0x72, 0x5f, 0x5f, 0x73,
		0x74, 0x72, 0xa7, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x65, 0x72,
		0xab, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x5f, 0x5f, 0x70,
		0x74, 0x72, 0x82, 0xa6, 0x4b, 0x69, 0x6e, 0x64, 0x5f, 0x5f,
		0x16, 0xa8, 0x53, 0x74, 0x72, 0x5f, 0x5f, 0x73, 0x74, 0x72,
		0xa2, 0x53, 0x32, 0xad, 0x53, 0x68, 0x6f, 0x77, 0x5a, 0x65,
		0x72, 0x6f, 0x5f, 0x5f, 0x62, 0x6f, 0x6f, 0xc3, 0x87, 0xa8,
		0x5a, 0x69, 0x64, 0x5f, 0x5f, 0x69, 0x36, 0x34, 0x02, 0xb0,
		0x46, 0x69, 0x65, 0x6c, 0x64, 0x47, 0x6f, 0x4e, 0x61, 0x6d,
		0x65, 0x5f, 0x5f, 0x73, 0x74, 0x72, 0xa5, 0x4d, 0x79, 0x70,
		0x74, 0x72, 0xb1, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x54, 0x61,
		0x67, 0x4e, 0x61, 0x6d, 0x65, 0x5f, 0x5f, 0x73, 0x74, 0x72,
		0xa5, 0x4d, 0x79, 0x70, 0x74, 0x72, 0xb1, 0x46, 0x69, 0x65,
		0x6c, 0x64, 0x54, 0x79, 0x70, 0x65, 0x53, 0x74, 0x72, 0x5f,
		0x5f, 0x73, 0x74, 0x72, 0xa3, 0x2a, 0x53, 0x32, 0xaf, 0x46,
		0x69, 0x65, 0x6c, 0x64, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f,
		0x72, 0x79, 0x5f, 0x5f, 0x1c, 0xb2, 0x46, 0x69, 0x65, 0x6c,
		0x64, 0x46, 0x75, 0x6c, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x5f,
		0x5f, 0x70, 0x74, 0x72, 0x83, 0xa6, 0x4b, 0x69, 0x6e, 0x64,
		0x5f, 0x5f, 0x1c, 0xa8, 0x53, 0x74, 0x72, 0x5f, 0x5f, 0x73,
		0x74, 0x72, 0xa7, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x65, 0x72,
		0xab, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x5f, 0x5f, 0x70,
		0x74, 0x72, 0x82, 0xa6, 0x4b, 0x69, 0x6e, 0x64, 0x5f, 0x5f,
		0x16, 0xa8, 0x53, 0x74, 0x72, 0x5f, 0x5f, 0x73, 0x74, 0x72,
		0xa2, 0x53, 0x32, 0xad, 0x53, 0x68, 0x6f, 0x77, 0x5a, 0x65,
		0x72, 0x6f, 0x5f, 0x5f, 0x62, 0x6f, 0x6f, 0xc3, 0x87, 0xa8,
		0x5a, 0x69, 0x64, 0x5f, 0x5f, 0x69, 0x36, 0x34, 0x03, 0xb0,
		0x46, 0x69, 0x65, 0x6c, 0x64, 0x47, 0x6f, 0x4e, 0x61, 0x6d,
		0x65, 0x5f, 0x5f, 0x73, 0x74, 0x72, 0xa7, 0x4d, 0x79, 0x61,
		0x72, 0x72, 0x61, 0x79, 0xb1, 0x46, 0x69, 0x65, 0x6c, 0x64,
		0x54, 0x61, 0x67, 0x4e, 0x61, 0x6d, 0x65, 0x5f, 0x5f, 0x73,
		0x74, 0x72, 0xa7, 0x4d, 0x79, 0x61, 0x72, 0x72, 0x61, 0x79,
		0xb1, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x54, 0x79, 0x70, 0x65,
		0x53, 0x74, 0x72, 0x5f, 0x5f, 0x73, 0x74, 0x72, 0xa9, 0x5b,
		0x33, 0x5d, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0xaf, 0x46,
		0x69, 0x65, 0x6c, 0x64, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f,
		0x72, 0x79, 0x5f, 0x5f, 0x1b, 0xb2, 0x46, 0x69, 0x65, 0x6c,
		0x64, 0x46, 0x75, 0x6c, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x5f,
		0x5f, 0x70, 0x74, 0x72, 0x84, 0xa6, 0x4b, 0x69, 0x6e, 0x64,
		0x5f, 0x5f, 0x1b, 0xa8, 0x53, 0x74, 0x72, 0x5f, 0x5f, 0x73,
		0x74, 0x72, 0xa5, 0x41, 0x72, 0x72, 0x61, 0x79, 0xab, 0x44,
		0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x5f, 0x5f, 0x70, 0x74, 0x72,
		0x82, 0xa6, 0x4b, 0x69, 0x6e, 0x64, 0x5f, 0x5f, 0x03, 0xa8,
		0x53, 0x74, 0x72, 0x5f, 0x5f, 0x73, 0x74, 0x72, 0xa1, 0x33,
		0xaa, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x5f, 0x70, 0x74,
		0x72, 0x82, 0xa6, 0x4b, 0x69, 0x6e, 0x64, 0x5f, 0x5f, 0x02,
		0xa8, 0x53, 0x74, 0x72, 0x5f, 0x5f, 0x73, 0x74, 0x72, 0xa6,
		0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0xad, 0x53, 0x68, 0x6f,
		0x77, 0x5a, 0x65, 0x72, 0x6f, 0x5f, 0x5f, 0x62, 0x6f, 0x6f,
		0xc3, 0x87, 0xa8, 0x5a, 0x69, 0x64, 0x5f, 0x5f, 0x69, 0x36,
		0x34, 0x04, 0xb0, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x47, 0x6f,
		0x4e, 0x61, 0x6d, 0x65, 0x5f, 0x5f, 0x73, 0x74, 0x72, 0xa7,
		0x4d, 0x79, 0x53, 0x6c, 0x69, 0x63, 0x65, 0xb1, 0x46, 0x69,
		0x65, 0x6c, 0x64, 0x54, 0x61, 0x67, 0x4e, 0x61, 0x6d, 0x65,
		0x5f, 0x5f, 0x73, 0x74, 0x72, 0xa7, 0x4d, 0x79, 0x53, 0x6c,
		0x69, 0x63, 0x65, 0xb1, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x54,
		0x79, 0x70, 0x65, 0x53, 0x74, 0x72, 0x5f, 0x5f, 0x73, 0x74,
		0x72, 0xa8, 0x5b, 0x5d, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67,
		0xaf, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x43, 0x61, 0x74, 0x65,
		0x67, 0x6f, 0x72, 0x79, 0x5f, 0x5f, 0x1a, 0xb2, 0x46, 0x69,
		0x65, 0x6c, 0x64, 0x46, 0x75, 0x6c, 0x6c, 0x54, 0x79, 0x70,
		0x65, 0x5f, 0x5f, 0x70, 0x74, 0x72, 0x83, 0xa6, 0x4b, 0x69,
		0x6e, 0x64, 0x5f, 0x5f, 0x1a, 0xa8, 0x53, 0x74, 0x72, 0x5f,
		0x5f, 0x73, 0x74, 0x72, 0xa5, 0x53, 0x6c, 0x69, 0x63, 0x65,
		0xab, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x5f, 0x5f, 0x70,
		0x74, 0x72, 0x82, 0xa6, 0x4b, 0x69, 0x6e, 0x64, 0x5f, 0x5f,
		0x02, 0xa8, 0x53, 0x74, 0x72, 0x5f, 0x5f, 0x73, 0x74, 0x72,
		0xa6, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0xad, 0x53, 0x68,
		0x6f, 0x77, 0x5a, 0x65, 0x72, 0x6f, 0x5f, 0x5f, 0x62, 0x6f,
		0x6f, 0xc3, 0xa1, 0x41, 0x82, 0xaf, 0x53, 0x74, 0x72, 0x75,
		0x63, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x5f, 0x5f, 0x73, 0x74,
		0x72, 0xa1, 0x41, 0xab, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73,
		0x5f, 0x5f, 0x73, 0x6c, 0x63, 0x96, 0x87, 0xa8, 0x5a, 0x69,
		0x64, 0x5f, 0x5f, 0x69, 0x36, 0x34, 0x00, 0xb0, 0x46, 0x69,
		0x65, 0x6c, 0x64, 0x47, 0x6f, 0x4e, 0x61, 0x6d, 0x65, 0x5f,
		0x5f, 0x73, 0x74, 0x72, 0xa4, 0x4e, 0x61, 0x6d, 0x65, 0xb1,
		0x46, 0x69, 0x65, 0x6c, 0x64, 0x54, 0x61, 0x67, 0x4e, 0x61,
		0x6d, 0x65, 0x5f, 0x5f, 0x73, 0x74, 0x72, 0xa4, 0x6e, 0x61,
		0x6d, 0x65, 0xb1, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x54, 0x79,
		0x70, 0x65, 0x53, 0x74, 0x72, 0x5f, 0x5f, 0x73, 0x74, 0x72,
		0xa6, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0xaf, 0x46, 0x69,
		0x65, 0x6c, 0x64, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72,
		0x79, 0x5f, 0x5f, 0x17, 0xb0, 0x46, 0x69, 0x65, 0x6c, 0x64,
		0x50, 0x72, 0x69, 0x6d, 0x69, 0x74, 0x69, 0x76, 0x65, 0x5f,
		0x5f, 0x02, 0xb2, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x46, 0x75,
		0x6c, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x5f, 0x70, 0x74,
		0x72, 0x82, 0xa6, 0x4b, 0x69, 0x6e, 0x64, 0x5f, 0x5f, 0x02,
		0xa8, 0x53, 0x74, 0x72, 0x5f, 0x5f, 0x73, 0x74, 0x72, 0xa6,
		0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x87, 0xa8, 0x5a, 0x69,
		0x64, 0x5f, 0x5f, 0x69, 0x36, 0x34, 0x01, 0xb0, 0x46, 0x69,
		0x65, 0x6c, 0x64, 0x47, 0x6f, 0x4e, 0x61, 0x6d, 0x65, 0x5f,
		0x5f, 0x73, 0x74, 0x72, 0xa4, 0x42, 0x64, 0x61, 0x79, 0xb1,
		0x46, 0x69, 0x65, 0x6c, 0x64, 0x54, 0x61, 0x67, 0x4e, 0x61,
		0x6d, 0x65, 0x5f, 0x5f, 0x73, 0x74, 0x72, 0xa4, 0x42, 0x64,
		0x61, 0x79, 0xb1, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x54, 0x79,
		0x70, 0x65, 0x53, 0x74, 0x72, 0x5f, 0x5f, 0x73, 0x74, 0x72,
		0xa9, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x54, 0x69, 0x6d, 0x65,
		0xaf, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x43, 0x61, 0x74, 0x65,
		0x67, 0x6f, 0x72, 0x79, 0x5f, 0x5f, 0x17, 0xb0, 0x46, 0x69,
		0x65, 0x6c, 0x64, 0x50, 0x72, 0x69, 0x6d, 0x69, 0x74, 0x69,
		0x76, 0x65, 0x5f, 0x5f, 0x14, 0xb2, 0x46, 0x69, 0x65, 0x6c,
		0x64, 0x46, 0x75, 0x6c, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x5f,
		0x5f, 0x70, 0x74, 0x72, 0x82, 0xa6, 0x4b, 0x69, 0x6e, 0x64,
		0x5f, 0x5f, 0x14, 0xa8, 0x53, 0x74, 0x72, 0x5f, 0x5f, 0x73,
		0x74, 0x72, 0xa4, 0x54, 0x69, 0x6d, 0x65, 0x88, 0xa8, 0x5a,
		0x69, 0x64, 0x5f, 0x5f, 0x69, 0x36, 0x34, 0x02, 0xb0, 0x46,
		0x69, 0x65, 0x6c, 0x64, 0x47, 0x6f, 0x4e, 0x61, 0x6d, 0x65,
		0x5f, 0x5f, 0x73, 0x74, 0x72, 0xa5, 0x50, 0x68, 0x6f, 0x6e,
		0x65, 0xb1, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x54, 0x61, 0x67,
		0x4e, 0x61, 0x6d, 0x65, 0x5f, 0x5f, 0x73, 0x74, 0x72, 0xa5,
		0x70, 0x68, 0x6f, 0x6e, 0x65, 0xb1, 0x46, 0x69, 0x65, 0x6c,
		0x64, 0x54, 0x79, 0x70, 0x65, 0x53, 0x74, 0x72, 0x5f, 0x5f,
		0x73, 0x74, 0x72, 0xa6, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67,
		0xaf, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x43, 0x61, 0x74, 0x65,
		0x67, 0x6f, 0x72, 0x79, 0x5f, 0x5f, 0x17, 0xb0, 0x46, 0x69,
		0x65, 0x6c, 0x64, 0x50, 0x72, 0x69, 0x6d, 0x69, 0x74, 0x69,
		0x76, 0x65, 0x5f, 0x5f, 0x02, 0xb2, 0x46, 0x69, 0x65, 0x6c,
		0x64, 0x46, 0x75, 0x6c, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x5f,
		0x5f, 0x70, 0x74, 0x72, 0x82, 0xa6, 0x4b, 0x69, 0x6e, 0x64,
		0x5f, 0x5f, 0x02, 0xa8, 0x53, 0x74, 0x72, 0x5f, 0x5f, 0x73,
		0x74, 0x72, 0xa6, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0xae,
		0x4f, 0x6d, 0x69, 0x74, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x5f,
		0x5f, 0x62, 0x6f, 0x6f, 0xc3, 0x88, 0xa8, 0x5a, 0x69, 0x64,
		0x5f, 0x5f, 0x69, 0x36, 0x34, 0x03, 0xb0, 0x46, 0x69, 0x65,
		0x6c, 0x64, 0x47, 0x6f, 0x4e, 0x61, 0x6d, 0x65, 0x5f, 0x5f,
		0x73, 0x74, 0x72, 0xa4, 0x53, 0x69, 0x62, 0x73, 0xb1, 0x46,
		0x69, 0x65, 0x6c, 0x64, 0x54, 0x61, 0x67, 0x4e, 0x61, 0x6d,
		0x65, 0x5f, 0x5f, 0x73, 0x74, 0x72, 0xa4, 0x53, 0x69, 0x62,
		0x73, 0xb1, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x54, 0x79, 0x70,
		0x65, 0x53, 0x74, 0x72, 0x5f, 0x5f, 0x73, 0x74, 0x72, 0xa3,
		0x69, 0x6e, 0x74, 0xaf, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x43,
		0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x5f, 0x5f, 0x17,
		0xb0, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x50, 0x72, 0x69, 0x6d,
		0x69, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x5f, 0x0d, 0xb2, 0x46,
		0x69, 0x65, 0x6c, 0x64, 0x46, 0x75, 0x6c, 0x6c, 0x54, 0x79,
		0x70, 0x65, 0x5f, 0x5f, 0x70, 0x74, 0x72, 0x82, 0xa6, 0x4b,
		0x69, 0x6e, 0x64, 0x5f, 0x5f, 0x0d, 0xa8, 0x53, 0x74, 0x72,
		0x5f, 0x5f, 0x73, 0x74, 0x72, 0xa3, 0x69, 0x6e, 0x74, 0xae,
		0x4f, 0x6d, 0x69, 0x74, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x5f,
		0x5f, 0x62, 0x6f, 0x6f, 0xc3, 0x87, 0xa8, 0x5a, 0x69, 0x64,
		0x5f, 0x5f, 0x69, 0x36, 0x34, 0x04, 0xb0, 0x46, 0x69, 0x65,
		0x6c, 0x64, 0x47, 0x6f, 0x4e, 0x61, 0x6d, 0x65, 0x5f, 0x5f,
		0x73, 0x74, 0x72, 0xa3, 0x47, 0x50, 0x41, 0xb1, 0x46, 0x69,
		0x65, 0x6c, 0x64, 0x54, 0x61, 0x67, 0x4e, 0x61, 0x6d, 0x65,
		0x5f, 0x5f, 0x73, 0x74, 0x72, 0xa3, 0x47, 0x50, 0x41, 0xb1,
		0x46, 0x69, 0x65, 0x6c, 0x64, 0x54, 0x79, 0x70, 0x65, 0x53,
		0x74, 0x72, 0x5f, 0x5f, 0x73, 0x74, 0x72, 0xa7, 0x66, 0x6c,
		0x6f, 0x61, 0x74, 0x36, 0x34, 0xaf, 0x46, 0x69, 0x65, 0x6c,
		0x64, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x5f,
		0x5f, 0x17, 0xb0, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x50, 0x72,
		0x69, 0x6d, 0x69, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x5f, 0x04,
		0xb2, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x46, 0x75, 0x6c, 0x6c,
		0x54, 0x79, 0x70, 0x65, 0x5f, 0x5f, 0x70, 0x74, 0x72, 0x82,
		0xa6, 0x4b, 0x69, 0x6e, 0x64, 0x5f, 0x5f, 0x04, 0xa8, 0x53,
		0x74, 0x72, 0x5f, 0x5f, 0x73, 0x74, 0x72, 0xa7, 0x66, 0x6c,
		0x6f, 0x61, 0x74, 0x36, 0x34, 0x87, 0xa8, 0x5a, 0x69, 0x64,
		0x5f, 0x5f, 0x69, 0x36, 0x34, 0x05, 0xb0, 0x46, 0x69, 0x65,
		0x6c, 0x64, 0x47, 0x6f, 0x4e, 0x61, 0x6d, 0x65, 0x5f, 0x5f,
		0x73, 0x74, 0x72, 0xa6, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64,
		0xb1, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x54, 0x61, 0x67, 0x4e,
		0x61, 0x6d, 0x65, 0x5f, 0x5f, 0x73, 0x74, 0x72, 0xa6, 0x46,
		0x72, 0x69, 0x65, 0x6e, 0x64, 0xb1, 0x46, 0x69, 0x65, 0x6c,
		0x64, 0x54, 0x79, 0x70, 0x65, 0x53, 0x74, 0x72, 0x5f, 0x5f,
		0x73, 0x74, 0x72, 0xa4, 0x62, 0x6f, 0x6f, 0x6c, 0xaf, 0x46,
		0x69, 0x65, 0x6c, 0x64, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f,
		0x72, 0x79, 0x5f, 0x5f, 0x17, 0xb0, 0x46, 0x69, 0x65, 0x6c,
		0x64, 0x50, 0x72, 0x69, 0x6d, 0x69, 0x74, 0x69, 0x76, 0x65,
		0x5f, 0x5f, 0x12, 0xb2, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x46,
		0x75, 0x6c, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x5f, 0x5f, 0x70,
		0x74, 0x72, 0x82, 0xa6, 0x4b, 0x69, 0x6e, 0x64, 0x5f, 0x5f,
		0x12, 0xa8, 0x53, 0x74, 0x72, 0x5f, 0x5f, 0x73, 0x74, 0x72,
		0xa4, 0x62, 0x6f, 0x6f, 0x6c, 0xa3, 0x53, 0x79, 0x73, 0x82,
		0xaf, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x4e, 0x61, 0x6d,
		0x65, 0x5f, 0x5f, 0x73, 0x74, 0x72, 0xa3, 0x53, 0x79, 0x73,
		0xab, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x5f, 0x5f, 0x73,
		0x6c, 0x63, 0x91, 0x87, 0xa8, 0x5a, 0x69, 0x64, 0x5f, 0x5f,
		0x69, 0x36, 0x34, 0x00, 0xb0, 0x46, 0x69, 0x65, 0x6c, 0x64,
		0x47, 0x6f, 0x4e, 0x61, 0x6d, 0x65, 0x5f, 0x5f, 0x73, 0x74,
		0x72, 0xa1, 0x46, 0xb1, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x54,
		0x61, 0x67, 0x4e, 0x61, 0x6d, 0x65, 0x5f, 0x5f, 0x73, 0x74,
		0x72, 0xa1, 0x46, 0xb1, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x54,
		0x79, 0x70, 0x65, 0x53, 0x74, 0x72, 0x5f, 0x5f, 0x73, 0x74,
		0x72, 0xab, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
		0x65, 0x7b, 0x7d, 0xaf, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x43,
		0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x5f, 0x5f, 0x17,
		0xb0, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x50, 0x72, 0x69, 0x6d,
		0x69, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x5f, 0x13, 0xb2, 0x46,
		0x69, 0x65, 0x6c, 0x64, 0x46, 0x75, 0x6c, 0x6c, 0x54, 0x79,
		0x70, 0x65, 0x5f, 0x5f, 0x70, 0x74, 0x72, 0x82, 0xa6, 0x4b,
		0x69, 0x6e, 0x64, 0x5f, 0x5f, 0x13, 0xa8, 0x53, 0x74, 0x72,
		0x5f, 0x5f, 0x73, 0x74, 0x72, 0xa4, 0x49, 0x6e, 0x74, 0x66,
		0xac, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x5f, 0x5f,
		0x73, 0x6c, 0x63, 0x92, 0xd9, 0x25, 0x22, 0x67, 0x69, 0x74,
		0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x67, 0x6c,
		0x79, 0x63, 0x65, 0x72, 0x69, 0x6e, 0x65, 0x2f, 0x67, 0x72,
		0x65, 0x65, 0x6e, 0x70, 0x61, 0x63, 0x6b, 0x2f, 0x6d, 0x73,
		0x67, 0x70, 0x22, 0xa6, 0x22, 0x74, 0x69, 0x6d, 0x65, 0x22,
	}
}

// MSGPGreenSchemaInJsonCompact provides the Greenpack Schema in compact JSON format, length 5471 bytes
func (FileMy_msgp) MSGPGreenSchemaInJsonCompact() []byte {
	return []byte(`{"SourcePath__str":"testdata/my.go","SourcePackage__str":"testdata","GreenSchemaId__i64":0,"Structs__map":{"S2":{"StructName__str":"S2","Fields__slc":[{"Zid__i64":0,"FieldGoName__str":"A","FieldTagName__str":"alpha","Skip__boo":true},{"Zid__i64":1,"FieldGoName__str":"B","FieldTagName__str":"beta","FieldTypeStr__str":"string","FieldCategory__":23,"FieldPrimitive__":2,"FieldFullType__ptr":{"Kind__":2,"Str__str":"string"}},{"Zid__i64":2,"FieldGoName__str":"R","FieldTagName__str":"ralph","FieldTypeStr__str":"map[string]uint8","FieldCategory__":24,"FieldFullType__ptr":{"Kind__":24,"Str__str":"Map","Domain__ptr":{"Kind__":2,"Str__str":"string"},"Range__ptr":{"Kind__":8,"Str__str":"uint8"}}},{"Zid__i64":3,"FieldGoName__str":"P","FieldTagName__str":"P","FieldTypeStr__str":"uint16","FieldCategory__":23,"FieldPrimitive__":9,"FieldFullType__ptr":{"Kind__":9,"Str__str":"uint16"},"Deprecated__boo":true},{"Zid__i64":4,"FieldGoName__str":"Q","FieldTagName__str":"Q","FieldTypeStr__str":"uint32","FieldCategory__":23,"FieldPrimitive__":10,"FieldFullType__ptr":{"Kind__":10,"Str__str":"uint32"}},{"Zid__i64":5,"FieldGoName__str":"T","FieldTagName__str":"T","FieldTypeStr__str":"int64","FieldCategory__":23,"FieldPrimitive__":17,"FieldFullType__ptr":{"Kind__":17,"Str__str":"int64"},"ShowZero__boo":true},{"Zid__i64":6,"FieldGoName__str":"Arr","FieldTagName__str":"arr","FieldTypeStr__str":"[msgp.ExtensionPrefixSize]float64","FieldCategory__":27,"FieldFullType__ptr":{"Kind__":27,"Str__str":"Array","Domain__ptr":{"Kind__":6,"Str__str":"msgp.ExtensionPrefixSize"},"Range__ptr":{"Kind__":4,"Str__str":"float64"}}},{"Zid__i64":7,"FieldGoName__str":"MyTree","FieldTagName__str":"MyTree","FieldTypeStr__str":"*Tree","FieldCategory__":28,"FieldFullType__ptr":{"Kind__":28,"Str__str":"Pointer","Domain__ptr":{"Kind__":22,"Str__str":"Tree"}}}]},"Tree":{"StructName__str":"Tree","Fields__slc":[{"Zid__i64":0,"FieldGoName__str":"Chld","FieldTagName__str":"Chld","FieldTypeStr__str":"[]Tree","FieldCategory__":26,"FieldFullType__ptr":{"Kind__":26,"Str__str":"Slice","Domain__ptr":{"Kind__":22,"Str__str":"Tree"}}},{"Zid__i64":1,"FieldGoName__str":"Str","FieldTagName__str":"Str","FieldTypeStr__str":"string","FieldCategory__":23,"FieldPrimitive__":2,"FieldFullType__ptr":{"Kind__":2,"Str__str":"string"}},{"Zid__i64":2,"FieldGoName__str":"Par","FieldTagName__str":"Par","FieldTypeStr__str":"*S2","FieldCategory__":28,"FieldFullType__ptr":{"Kind__":28,"Str__str":"Pointer","Domain__ptr":{"Kind__":22,"Str__str":"S2"}}}]},"Big":{"StructName__str":"Big","Fields__slc":[{"Zid__i64":0,"FieldGoName__str":"Slice","FieldTagName__str":"Slice","FieldTypeStr__str":"[]S2","FieldCategory__":26,"FieldFullType__ptr":{"Kind__":26,"Str__str":"Slice","Domain__ptr":{"Kind__":22,"Str__str":"S2"}},"ShowZero__boo":true},{"Zid__i64":1,"FieldGoName__str":"Transform","FieldTagName__str":"Transform","FieldTypeStr__str":"map[int]*S2","FieldCategory__":24,"FieldFullType__ptr":{"Kind__":24,"Str__str":"Map","Domain__ptr":{"Kind__":13,"Str__str":"int"},"Range__ptr":{"Kind__":28,"Str__str":"Pointer","Domain__ptr":{"Kind__":22,"Str__str":"S2"}}},"ShowZero__boo":true},{"Zid__i64":2,"FieldGoName__str":"Myptr","FieldTagName__str":"Myptr","FieldTypeStr__str":"*S2","FieldCategory__":28,"FieldFullType__ptr":{"Kind__":28,"Str__str":"Pointer","Domain__ptr":{"Kind__":22,"Str__str":"S2"}},"ShowZero__boo":true},{"Zid__i64":3,"FieldGoName__str":"Myarray","FieldTagName__str":"Myarray","FieldTypeStr__str":"[3]string","FieldCategory__":27,"FieldFullType__ptr":{"Kind__":27,"Str__str":"Array","Domain__ptr":{"Kind__":3,"Str__str":"3"},"Range__ptr":{"Kind__":2,"Str__str":"string"}},"ShowZero__boo":true},{"Zid__i64":4,"FieldGoName__str":"MySlice","FieldTagName__str":"MySlice","FieldTypeStr__str":"[]string","FieldCategory__":26,"FieldFullType__ptr":{"Kind__":26,"Str__str":"Slice","Domain__ptr":{"Kind__":2,"Str__str":"string"}},"ShowZero__boo":true}]},"A":{"StructName__str":"A","Fields__slc":[{"Zid__i64":0,"FieldGoName__str":"Name","FieldTagName__str":"name","FieldTypeStr__str":"string","FieldCategory__":23,"FieldPrimitive__":2,"FieldFullType__ptr":{"Kind__":2,"Str__str":"string"}},{"Zid__i64":1,"FieldGoName__str":"Bday","FieldTagName__str":"Bday","FieldTypeStr__str":"time.Time","FieldCategory__":23,"FieldPrimitive__":20,"FieldFullType__ptr":{"Kind__":20,"Str__str":"Time"}},{"Zid__i64":2,"FieldGoName__str":"Phone","FieldTagName__str":"phone","FieldTypeStr__str":"string","FieldCategory__":23,"FieldPrimitive__":2,"FieldFullType__ptr":{"Kind__":2,"Str__str":"string"},"OmitEmpty__boo":true},{"Zid__i64":3,"FieldGoName__str":"Sibs","FieldTagName__str":"Sibs","FieldTypeStr__str":"int","FieldCategory__":23,"FieldPrimitive__":13,"FieldFullType__ptr":{"Kind__":13,"Str__str":"int"},"OmitEmpty__boo":true},{"Zid__i64":4,"FieldGoName__str":"GPA","FieldTagName__str":"GPA","FieldTypeStr__str":"float64","FieldCategory__":23,"FieldPrimitive__":4,"FieldFullType__ptr":{"Kind__":4,"Str__str":"float64"}},{"Zid__i64":5,"FieldGoName__str":"Friend","FieldTagName__str":"Friend","FieldTypeStr__str":"bool","FieldCategory__":23,"FieldPrimitive__":18,"FieldFullType__ptr":{"Kind__":18,"Str__str":"bool"}}]},"Sys":{"StructName__str":"Sys","Fields__slc":[{"Zid__i64":0,"FieldGoName__str":"F","FieldTagName__str":"F","FieldTypeStr__str":"interface{}","FieldCategory__":23,"FieldPrimitive__":19,"FieldFullType__ptr":{"Kind__":19,"Str__str":"Intf"}}]}},"Imports__slc":["\"github.com/glycerine/greenpack/msgp\"","\"time\""]}`)
}

// MSGPGreenSchemaInJsonPretty provides the Greenpack Schema in pretty JSON format, length 13353 bytes
func (FileMy_msgp) MSGPGreenSchemaInJsonPretty() []byte {
	return []byte(`{
    "SourcePath__str": "testdata/my.go",
    "SourcePackage__str": "testdata",
    "GreenSchemaId__i64": 0,
    "Structs__map": {
        "S2": {
            "StructName__str": "S2",
            "Fields__slc": [
                {
                    "Zid__i64": 0,
                    "FieldGoName__str": "A",
                    "FieldTagName__str": "alpha",
                    "Skip__boo": true
                },
                {
                    "Zid__i64": 1,
                    "FieldGoName__str": "B",
                    "FieldTagName__str": "beta",
                    "FieldTypeStr__str": "string",
                    "FieldCategory__": 23,
                    "FieldPrimitive__": 2,
                    "FieldFullType__ptr": {
                        "Kind__": 2,
                        "Str__str": "string"
                    }
                },
                {
                    "Zid__i64": 2,
                    "FieldGoName__str": "R",
                    "FieldTagName__str": "ralph",
                    "FieldTypeStr__str": "map[string]uint8",
                    "FieldCategory__": 24,
                    "FieldFullType__ptr": {
                        "Kind__": 24,
                        "Str__str": "Map",
                        "Domain__ptr": {
                            "Kind__": 2,
                            "Str__str": "string"
                        },
                        "Range__ptr": {
                            "Kind__": 8,
                            "Str__str": "uint8"
                        }
                    }
                },
                {
                    "Zid__i64": 3,
                    "FieldGoName__str": "P",
                    "FieldTagName__str": "P",
                    "FieldTypeStr__str": "uint16",
                    "FieldCategory__": 23,
                    "FieldPrimitive__": 9,
                    "FieldFullType__ptr": {
                        "Kind__": 9,
                        "Str__str": "uint16"
                    },
                    "Deprecated__boo": true
                },
                {
                    "Zid__i64": 4,
                    "FieldGoName__str": "Q",
                    "FieldTagName__str": "Q",
                    "FieldTypeStr__str": "uint32",
                    "FieldCategory__": 23,
                    "FieldPrimitive__": 10,
                    "FieldFullType__ptr": {
                        "Kind__": 10,
                        "Str__str": "uint32"
                    }
                },
                {
                    "Zid__i64": 5,
                    "FieldGoName__str": "T",
                    "FieldTagName__str": "T",
                    "FieldTypeStr__str": "int64",
                    "FieldCategory__": 23,
                    "FieldPrimitive__": 17,
                    "FieldFullType__ptr": {
                        "Kind__": 17,
                        "Str__str": "int64"
                    },
                    "ShowZero__boo": true
                },
                {
                    "Zid__i64": 6,
                    "FieldGoName__str": "Arr",
                    "FieldTagName__str": "arr",
                    "FieldTypeStr__str": "[msgp.ExtensionPrefixSize]float64",
                    "FieldCategory__": 27,
                    "FieldFullType__ptr": {
                        "Kind__": 27,
                        "Str__str": "Array",
                        "Domain__ptr": {
                            "Kind__": 6,
                            "Str__str": "msgp.ExtensionPrefixSize"
                        },
                        "Range__ptr": {
                            "Kind__": 4,
                            "Str__str": "float64"
                        }
                    }
                },
                {
                    "Zid__i64": 7,
                    "FieldGoName__str": "MyTree",
                    "FieldTagName__str": "MyTree",
                    "FieldTypeStr__str": "*Tree",
                    "FieldCategory__": 28,
                    "FieldFullType__ptr": {
                        "Kind__": 28,
                        "Str__str": "Pointer",
                        "Domain__ptr": {
                            "Kind__": 22,
                            "Str__str": "Tree"
                        }
                    }
                }
            ]
        },
        "Tree": {
            "StructName__str": "Tree",
            "Fields__slc": [
                {
                    "Zid__i64": 0,
                    "FieldGoName__str": "Chld",
                    "FieldTagName__str": "Chld",
                    "FieldTypeStr__str": "[]Tree",
                    "FieldCategory__": 26,
                    "FieldFullType__ptr": {
                        "Kind__": 26,
                        "Str__str": "Slice",
                        "Domain__ptr": {
                            "Kind__": 22,
                            "Str__str": "Tree"
                        }
                    }
                },
                {
                    "Zid__i64": 1,
                    "FieldGoName__str": "Str",
                    "FieldTagName__str": "Str",
                    "FieldTypeStr__str": "string",
                    "FieldCategory__": 23,
                    "FieldPrimitive__": 2,
                    "FieldFullType__ptr": {
                        "Kind__": 2,
                        "Str__str": "string"
                    }
                },
                {
                    "Zid__i64": 2,
                    "FieldGoName__str": "Par",
                    "FieldTagName__str": "Par",
                    "FieldTypeStr__str": "*S2",
                    "FieldCategory__": 28,
                    "FieldFullType__ptr": {
                        "Kind__": 28,
                        "Str__str": "Pointer",
                        "Domain__ptr": {
                            "Kind__": 22,
                            "Str__str": "S2"
                        }
                    }
                }
            ]
        },
        "Big": {
            "StructName__str": "Big",
            "Fields__slc": [
                {
                    "Zid__i64": 0,
                    "FieldGoName__str": "Slice",
                    "FieldTagName__str": "Slice",
                    "FieldTypeStr__str": "[]S2",
                    "FieldCategory__": 26,
                    "FieldFullType__ptr": {
                        "Kind__": 26,
                        "Str__str": "Slice",
                        "Domain__ptr": {
                            "Kind__": 22,
                            "Str__str": "S2"
                        }
                    },
                    "ShowZero__boo": true
                },
                {
                    "Zid__i64": 1,
                    "FieldGoName__str": "Transform",
                    "FieldTagName__str": "Transform",
                    "FieldTypeStr__str": "map[int]*S2",
                    "FieldCategory__": 24,
                    "FieldFullType__ptr": {
                        "Kind__": 24,
                        "Str__str": "Map",
                        "Domain__ptr": {
                            "Kind__": 13,
                            "Str__str": "int"
                        },
                        "Range__ptr": {
                            "Kind__": 28,
                            "Str__str": "Pointer",
                            "Domain__ptr": {
                                "Kind__": 22,
                                "Str__str": "S2"
                            }
                        }
                    },
                    "ShowZero__boo": true
                },
                {
                    "Zid__i64": 2,
                    "FieldGoName__str": "Myptr",
                    "FieldTagName__str": "Myptr",
                    "FieldTypeStr__str": "*S2",
                    "FieldCategory__": 28,
                    "FieldFullType__ptr": {
                        "Kind__": 28,
                        "Str__str": "Pointer",
                        "Domain__ptr": {
                            "Kind__": 22,
                            "Str__str": "S2"
                        }
                    },
                    "ShowZero__boo": true
                },
                {
                    "Zid__i64": 3,
                    "FieldGoName__str": "Myarray",
                    "FieldTagName__str": "Myarray",
                    "FieldTypeStr__str": "[3]string",
                    "FieldCategory__": 27,
                    "FieldFullType__ptr": {
                        "Kind__": 27,
                        "Str__str": "Array",
                        "Domain__ptr": {
                            "Kind__": 3,
                            "Str__str": "3"
                        },
                        "Range__ptr": {
                            "Kind__": 2,
                            "Str__str": "string"
                        }
                    },
                    "ShowZero__boo": true
                },
                {
                    "Zid__i64": 4,
                    "FieldGoName__str": "MySlice",
                    "FieldTagName__str": "MySlice",
                    "FieldTypeStr__str": "[]string",
                    "FieldCategory__": 26,
                    "FieldFullType__ptr": {
                        "Kind__": 26,
                        "Str__str": "Slice",
                        "Domain__ptr": {
                            "Kind__": 2,
                            "Str__str": "string"
                        }
                    },
                    "ShowZero__boo": true
                }
            ]
        },
        "A": {
            "StructName__str": "A",
            "Fields__slc": [
                {
                    "Zid__i64": 0,
                    "FieldGoName__str": "Name",
                    "FieldTagName__str": "name",
                    "FieldTypeStr__str": "string",
                    "FieldCategory__": 23,
                    "FieldPrimitive__": 2,
                    "FieldFullType__ptr": {
                        "Kind__": 2,
                        "Str__str": "string"
                    }
                },
                {
                    "Zid__i64": 1,
                    "FieldGoName__str": "Bday",
                    "FieldTagName__str": "Bday",
                    "FieldTypeStr__str": "time.Time",
                    "FieldCategory__": 23,
                    "FieldPrimitive__": 20,
                    "FieldFullType__ptr": {
                        "Kind__": 20,
                        "Str__str": "Time"
                    }
                },
                {
                    "Zid__i64": 2,
                    "FieldGoName__str": "Phone",
                    "FieldTagName__str": "phone",
                    "FieldTypeStr__str": "string",
                    "FieldCategory__": 23,
                    "FieldPrimitive__": 2,
                    "FieldFullType__ptr": {
                        "Kind__": 2,
                        "Str__str": "string"
                    },
                    "OmitEmpty__boo": true
                },
                {
                    "Zid__i64": 3,
                    "FieldGoName__str": "Sibs",
                    "FieldTagName__str": "Sibs",
                    "FieldTypeStr__str": "int",
                    "FieldCategory__": 23,
                    "FieldPrimitive__": 13,
                    "FieldFullType__ptr": {
                        "Kind__": 13,
                        "Str__str": "int"
                    },
                    "OmitEmpty__boo": true
                },
                {
                    "Zid__i64": 4,
                    "FieldGoName__str": "GPA",
                    "FieldTagName__str": "GPA",
                    "FieldTypeStr__str": "float64",
                    "FieldCategory__": 23,
                    "FieldPrimitive__": 4,
                    "FieldFullType__ptr": {
                        "Kind__": 4,
                        "Str__str": "float64"
                    }
                },
                {
                    "Zid__i64": 5,
                    "FieldGoName__str": "Friend",
                    "FieldTagName__str": "Friend",
                    "FieldTypeStr__str": "bool",
                    "FieldCategory__": 23,
                    "FieldPrimitive__": 18,
                    "FieldFullType__ptr": {
                        "Kind__": 18,
                        "Str__str": "bool"
                    }
                }
            ]
        },
        "Sys": {
            "StructName__str": "Sys",
            "Fields__slc": [
                {
                    "Zid__i64": 0,
                    "FieldGoName__str": "F",
                    "FieldTagName__str": "F",
                    "FieldTypeStr__str": "interface{}",
                    "FieldCategory__": 23,
                    "FieldPrimitive__": 19,
                    "FieldFullType__ptr": {
                        "Kind__": 19,
                        "Str__str": "Intf"
                    }
                }
            ]
        }
    },
    "Imports__slc": [
        "\"github.com/glycerine/greenpack/msgp\"",
        "\"time\""
    ]
}`)
}
