package testdata

// NOTE: THIS FILE WAS PRODUCED BY THE
// ZEBRAPACK CODE GENERATION TOOL (github.com/glycerine/zebrapack)
// DO NOT EDIT

import (
	"github.com/glycerine/greenpack/msgp"
)

// MSGPfieldsNotEmpty supports omitempty tags
func (z *A) MSGPfieldsNotEmpty(isempty []bool) uint32 {
	if len(isempty) == 0 {
		return 6
	}
	var fieldsInUse uint32 = 6
	isempty[2] = (len(z.Phone) == 0) // string, omitempty
	if isempty[2] {
		fieldsInUse--
	}
	isempty[3] = (z.Sibs == 0) // number, omitempty
	if isempty[3] {
		fieldsInUse--
	}

	return fieldsInUse
}

// MSGPMarshalMsg implements msgp.Marshaler
func (z *A) MSGPMarshalMsg(b []byte) (o []byte, err error) {
	if p, ok := interface{}(z).(msgp.PreSave); ok {
		p.PreSaveHook()
	}

	o = msgp.Require(b, z.MSGPMsgsize())

	// honor the omitempty tags
	var empty [6]bool
	fieldsInUse := z.fieldsNotEmpty(empty[:])
	o = msgp.AppendMapHeader(o, fieldsInUse)

	// string "name_zid00_str"
	o = append(o, 0xae, 0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x30, 0x5f, 0x73, 0x74, 0x72)
	o = msgp.AppendString(o, z.Name)
	// string "Bday_zid01_tim"
	o = append(o, 0xae, 0x42, 0x64, 0x61, 0x79, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x31, 0x5f, 0x74, 0x69, 0x6d)
	o = msgp.AppendTime(o, z.Bday)
	if !empty[2] {
		// string "phone_zid02_str"
		o = append(o, 0xaf, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x32, 0x5f, 0x73, 0x74, 0x72)
		o = msgp.AppendString(o, z.Phone)
	}

	if !empty[3] {
		// string "Sibs_zid03_int"
		o = append(o, 0xae, 0x53, 0x69, 0x62, 0x73, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x33, 0x5f, 0x69, 0x6e, 0x74)
		o = msgp.AppendInt(o, z.Sibs)
	}

	// string "GPA_zid04_f64"
	o = append(o, 0xad, 0x47, 0x50, 0x41, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x34, 0x5f, 0x66, 0x36, 0x34)
	o = msgp.AppendFloat64(o, z.GPA)
	// string "Friend_zid05_boo"
	o = append(o, 0xb0, 0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x35, 0x5f, 0x62, 0x6f, 0x6f)
	o = msgp.AppendBool(o, z.Friend)
	return
}

// MSGPUnmarshalMsg implements msgp.Unmarshaler
func (z *A) MSGPUnmarshalMsg(bts []byte) (o []byte, err error) {
	return z.MSGPUnmarshalMsgWithCfg(bts, nil)
}
func (z *A) MSGPUnmarshalMsgWithCfg(bts []byte, cfg *msgp.RuntimeConfig) (o []byte, err error) {
	var nbs msgp.NilBitsStack
	nbs.Init(cfg)
	var sawTopNil bool
	if msgp.IsNil(bts) {
		sawTopNil = true
		bts = nbs.PushAlwaysNil(bts[1:])
	}

	var field []byte
	_ = field
	const maxFields0ztet = 6

	// -- templateUnmarshalMsg starts here--
	var totalEncodedFields0ztet uint32
	if !nbs.AlwaysNil {
		totalEncodedFields0ztet, bts, err = nbs.ReadMapHeaderBytes(bts)
		if err != nil {
			return
		}
	}
	encodedFieldsLeft0ztet := totalEncodedFields0ztet
	missingFieldsLeft0ztet := maxFields0ztet - totalEncodedFields0ztet

	var nextMiss0ztet int32 = -1
	var found0ztet [maxFields0ztet]bool
	var curField0ztet string

doneWithStruct0ztet:
	// First fill all the encoded fields, then
	// treat the remaining, missing fields, as Nil.
	for encodedFieldsLeft0ztet > 0 || missingFieldsLeft0ztet > 0 {
		//fmt.Printf("encodedFieldsLeft: %v, missingFieldsLeft: %v, found: '%v', fields: '%#v'\n", encodedFieldsLeft0ztet, missingFieldsLeft0ztet, msgp.ShowFound(found0ztet[:]), unmarshalMsgFieldOrder0ztet)
		if encodedFieldsLeft0ztet > 0 {
			encodedFieldsLeft0ztet--
			field, bts, err = nbs.ReadMapKeyZC(bts)
			if err != nil {
				return
			}
			curField0ztet = msgp.UnsafeString(field)
		} else {
			//missing fields need handling
			if nextMiss0ztet < 0 {
				// set bts to contain just mnil (0xc0)
				bts = nbs.PushAlwaysNil(bts)
				nextMiss0ztet = 0
			}
			for nextMiss0ztet < maxFields0ztet && (found0ztet[nextMiss0ztet] || unmarshalMsgFieldSkip0ztet[nextMiss0ztet]) {
				nextMiss0ztet++
			}
			if nextMiss0ztet == maxFields0ztet {
				// filled all the empty fields!
				break doneWithStruct0ztet
			}
			missingFieldsLeft0ztet--
			curField0ztet = unmarshalMsgFieldOrder0ztet[nextMiss0ztet]
		}
		//fmt.Printf("switching on curField: '%v'\n", curField0ztet)
		switch curField0ztet {
		// -- templateUnmarshalMsg ends here --

		case "name_zid00_str":
			found0ztet[0] = true
			z.Name, bts, err = nbs.ReadStringBytes(bts)

			if err != nil {
				return
			}
		case "Bday_zid01_tim":
			found0ztet[1] = true
			z.Bday, bts, err = nbs.ReadTimeBytes(bts)

			if err != nil {
				return
			}
		case "phone_zid02_str":
			found0ztet[2] = true
			z.Phone, bts, err = nbs.ReadStringBytes(bts)

			if err != nil {
				return
			}
		case "Sibs_zid03_int":
			found0ztet[3] = true
			z.Sibs, bts, err = nbs.ReadIntBytes(bts)

			if err != nil {
				return
			}
		case "GPA_zid04_f64":
			found0ztet[4] = true
			z.GPA, bts, err = nbs.ReadFloat64Bytes(bts)

			if err != nil {
				return
			}
		case "Friend_zid05_boo":
			found0ztet[5] = true
			z.Friend, bts, err = nbs.ReadBoolBytes(bts)

			if err != nil {
				return
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				return
			}
		}
	}
	if nextMiss0ztet != -1 {
		bts = nbs.PopAlwaysNil()
	}

	if sawTopNil {
		bts = nbs.PopAlwaysNil()
	}
	o = bts
	if p, ok := interface{}(z).(msgp.PostLoad); ok {
		p.PostLoadHook()
	}

	return
}

// fields of A
var unmarshalMsgFieldOrder0ztet = []string{"name_zid00_str", "Bday_zid01_tim", "phone_zid02_str", "Sibs_zid03_int", "GPA_zid04_f64", "Friend_zid05_boo"}

var unmarshalMsgFieldSkip0ztet = []bool{false, false, false, false, false, false}

// MSGPMsgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *A) MSGPMsgsize() (s int) {
	s = 1 + 15 + msgp.StringPrefixSize + len(z.Name) + 15 + msgp.TimeSize + 16 + msgp.StringPrefixSize + len(z.Phone) + 15 + msgp.IntSize + 14 + msgp.Float64Size + 17 + msgp.BoolSize
	return
}

// MSGPfieldsNotEmpty supports omitempty tags
func (z *Big) MSGPfieldsNotEmpty(isempty []bool) uint32 {
	return 5
}

// MSGPMarshalMsg implements msgp.Marshaler
func (z *Big) MSGPMarshalMsg(b []byte) (o []byte, err error) {
	if p, ok := interface{}(z).(msgp.PreSave); ok {
		p.PreSaveHook()
	}

	o = msgp.Require(b, z.MSGPMsgsize())
	// map header, size 5
	// string "Slice_zid00_slc"
	o = append(o, 0x85, 0xaf, 0x53, 0x6c, 0x69, 0x63, 0x65, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x30, 0x5f, 0x73, 0x6c, 0x63)
	o = msgp.AppendArrayHeader(o, uint32(len(z.Slice)))
	for zpax := range z.Slice {
		o, err = z.Slice[zpax].MSGPMarshalMsg(o)
		if err != nil {
			return
		}
	}
	// string "Transform_zid01_map"
	o = append(o, 0xb3, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x6f, 0x72, 0x6d, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x31, 0x5f, 0x6d, 0x61, 0x70)
	o = msgp.AppendMapHeader(o, uint32(len(z.Transform)))
	for zfzf, zfar := range z.Transform {
		o = msgp.AppendInt(o, zfzf)
		if zfar == nil {
			o = msgp.AppendNil(o)
		} else {
			o, err = zfar.MSGPMarshalMsg(o)
			if err != nil {
				return
			}
		}
	}
	// string "Myptr_zid02_ptr"
	o = append(o, 0xaf, 0x4d, 0x79, 0x70, 0x74, 0x72, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x32, 0x5f, 0x70, 0x74, 0x72)
	if z.Myptr == nil {
		o = msgp.AppendNil(o)
	} else {
		o, err = z.Myptr.MSGPMarshalMsg(o)
		if err != nil {
			return
		}
	}
	// string "Myarray_zid03_ary"
	o = append(o, 0xb1, 0x4d, 0x79, 0x61, 0x72, 0x72, 0x61, 0x79, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x33, 0x5f, 0x61, 0x72, 0x79)
	o = msgp.AppendArrayHeader(o, 3)
	for zajk := range z.Myarray {
		o = msgp.AppendString(o, z.Myarray[zajk])
	}
	// string "MySlice_zid04_slc"
	o = append(o, 0xb1, 0x4d, 0x79, 0x53, 0x6c, 0x69, 0x63, 0x65, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x34, 0x5f, 0x73, 0x6c, 0x63)
	o = msgp.AppendArrayHeader(o, uint32(len(z.MySlice)))
	for zlnf := range z.MySlice {
		o = msgp.AppendString(o, z.MySlice[zlnf])
	}
	return
}

// MSGPUnmarshalMsg implements msgp.Unmarshaler
func (z *Big) MSGPUnmarshalMsg(bts []byte) (o []byte, err error) {
	return z.MSGPUnmarshalMsgWithCfg(bts, nil)
}
func (z *Big) MSGPUnmarshalMsgWithCfg(bts []byte, cfg *msgp.RuntimeConfig) (o []byte, err error) {
	var nbs msgp.NilBitsStack
	nbs.Init(cfg)
	var sawTopNil bool
	if msgp.IsNil(bts) {
		sawTopNil = true
		bts = nbs.PushAlwaysNil(bts[1:])
	}

	var field []byte
	_ = field
	const maxFields1zvoi = 5

	// -- templateUnmarshalMsg starts here--
	var totalEncodedFields1zvoi uint32
	if !nbs.AlwaysNil {
		totalEncodedFields1zvoi, bts, err = nbs.ReadMapHeaderBytes(bts)
		if err != nil {
			return
		}
	}
	encodedFieldsLeft1zvoi := totalEncodedFields1zvoi
	missingFieldsLeft1zvoi := maxFields1zvoi - totalEncodedFields1zvoi

	var nextMiss1zvoi int32 = -1
	var found1zvoi [maxFields1zvoi]bool
	var curField1zvoi string

doneWithStruct1zvoi:
	// First fill all the encoded fields, then
	// treat the remaining, missing fields, as Nil.
	for encodedFieldsLeft1zvoi > 0 || missingFieldsLeft1zvoi > 0 {
		//fmt.Printf("encodedFieldsLeft: %v, missingFieldsLeft: %v, found: '%v', fields: '%#v'\n", encodedFieldsLeft1zvoi, missingFieldsLeft1zvoi, msgp.ShowFound(found1zvoi[:]), unmarshalMsgFieldOrder1zvoi)
		if encodedFieldsLeft1zvoi > 0 {
			encodedFieldsLeft1zvoi--
			field, bts, err = nbs.ReadMapKeyZC(bts)
			if err != nil {
				return
			}
			curField1zvoi = msgp.UnsafeString(field)
		} else {
			//missing fields need handling
			if nextMiss1zvoi < 0 {
				// set bts to contain just mnil (0xc0)
				bts = nbs.PushAlwaysNil(bts)
				nextMiss1zvoi = 0
			}
			for nextMiss1zvoi < maxFields1zvoi && (found1zvoi[nextMiss1zvoi] || unmarshalMsgFieldSkip1zvoi[nextMiss1zvoi]) {
				nextMiss1zvoi++
			}
			if nextMiss1zvoi == maxFields1zvoi {
				// filled all the empty fields!
				break doneWithStruct1zvoi
			}
			missingFieldsLeft1zvoi--
			curField1zvoi = unmarshalMsgFieldOrder1zvoi[nextMiss1zvoi]
		}
		//fmt.Printf("switching on curField: '%v'\n", curField1zvoi)
		switch curField1zvoi {
		// -- templateUnmarshalMsg ends here --

		case "Slice_zid00_slc":
			found1zvoi[0] = true
			if nbs.AlwaysNil {
				(z.Slice) = (z.Slice)[:0]
			} else {

				var zajj uint32
				zajj, bts, err = nbs.ReadArrayHeaderBytes(bts)
				if err != nil {
					return
				}
				if cap(z.Slice) >= int(zajj) {
					z.Slice = (z.Slice)[:zajj]
				} else {
					z.Slice = make([]S2, zajj)
				}
				for zpax := range z.Slice {
					bts, err = z.Slice[zpax].MSGPUnmarshalMsg(bts)
					if err != nil {
						return
					}
					if err != nil {
						return
					}
				}
			}
		case "Transform_zid01_map":
			found1zvoi[1] = true
			if nbs.AlwaysNil {
				if len(z.Transform) > 0 {
					for key, _ := range z.Transform {
						delete(z.Transform, key)
					}
				}

			} else {

				var zmkk uint32
				zmkk, bts, err = nbs.ReadMapHeaderBytes(bts)
				if err != nil {
					return
				}
				if z.Transform == nil && zmkk > 0 {
					z.Transform = make(map[int]*S2, zmkk)
				} else if len(z.Transform) > 0 {
					for key, _ := range z.Transform {
						delete(z.Transform, key)
					}
				}
				for zmkk > 0 {
					var zfzf int
					var zfar *S2
					zmkk--
					zfzf, bts, err = nbs.ReadIntBytes(bts)
					if err != nil {
						return
					}
					if nbs.AlwaysNil {
						if zfar != nil {
							zfar.MSGPUnmarshalMsg(msgp.OnlyNilSlice)
						}
					} else {
						// not nbs.AlwaysNil
						if msgp.IsNil(bts) {
							bts = bts[1:]
							if nil != zfar {
								zfar.MSGPUnmarshalMsg(msgp.OnlyNilSlice)
							}
						} else {
							// not nbs.AlwaysNil and not IsNil(bts): have something to read

							if zfar == nil {
								zfar = new(S2)
							}
							bts, err = zfar.MSGPUnmarshalMsg(bts)
							if err != nil {
								return
							}
							if err != nil {
								return
							}
						}
					}
					z.Transform[zfzf] = zfar
				}
			}
		case "Myptr_zid02_ptr":
			found1zvoi[2] = true
			if nbs.AlwaysNil {
				if z.Myptr != nil {
					z.Myptr.MSGPUnmarshalMsg(msgp.OnlyNilSlice)
				}
			} else {
				// not nbs.AlwaysNil
				if msgp.IsNil(bts) {
					bts = bts[1:]
					if nil != z.Myptr {
						z.Myptr.MSGPUnmarshalMsg(msgp.OnlyNilSlice)
					}
				} else {
					// not nbs.AlwaysNil and not IsNil(bts): have something to read

					if z.Myptr == nil {
						z.Myptr = new(S2)
					}
					bts, err = z.Myptr.MSGPUnmarshalMsg(bts)
					if err != nil {
						return
					}
					if err != nil {
						return
					}
				}
			}
		case "Myarray_zid03_ary":
			found1zvoi[3] = true
			var zmnd uint32
			zmnd, bts, err = nbs.ReadArrayHeaderBytes(bts)
			if err != nil {
				return
			}
			if !nbs.IsNil(bts) && zmnd != 3 {
				err = msgp.ArrayError{Wanted: 3, Got: zmnd}
				return
			}
			for zajk := range z.Myarray {
				z.Myarray[zajk], bts, err = nbs.ReadStringBytes(bts)

				if err != nil {
					return
				}
			}
		case "MySlice_zid04_slc":
			found1zvoi[4] = true
			if nbs.AlwaysNil {
				(z.MySlice) = (z.MySlice)[:0]
			} else {

				var zlzi uint32
				zlzi, bts, err = nbs.ReadArrayHeaderBytes(bts)
				if err != nil {
					return
				}
				if cap(z.MySlice) >= int(zlzi) {
					z.MySlice = (z.MySlice)[:zlzi]
				} else {
					z.MySlice = make([]string, zlzi)
				}
				for zlnf := range z.MySlice {
					z.MySlice[zlnf], bts, err = nbs.ReadStringBytes(bts)

					if err != nil {
						return
					}
				}
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				return
			}
		}
	}
	if nextMiss1zvoi != -1 {
		bts = nbs.PopAlwaysNil()
	}

	if sawTopNil {
		bts = nbs.PopAlwaysNil()
	}
	o = bts
	if p, ok := interface{}(z).(msgp.PostLoad); ok {
		p.PostLoadHook()
	}

	return
}

// fields of Big
var unmarshalMsgFieldOrder1zvoi = []string{"Slice_zid00_slc", "Transform_zid01_map", "Myptr_zid02_ptr", "Myarray_zid03_ary", "MySlice_zid04_slc"}

var unmarshalMsgFieldSkip1zvoi = []bool{false, false, false, false, false}

// MSGPMsgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *Big) MSGPMsgsize() (s int) {
	s = 1 + 16 + msgp.ArrayHeaderSize
	for zpax := range z.Slice {
		s += z.Slice[zpax].MSGPMsgsize()
	}
	s += 20 + msgp.MapHeaderSize
	if z.Transform != nil {
		for zfzf, zfar := range z.Transform {
			_ = zfar
			_ = zfzf
			s += msgp.IntSize
			if zfar == nil {
				s += msgp.NilSize
			} else {
				s += zfar.MSGPMsgsize()
			}
		}
	}
	s += 16
	if z.Myptr == nil {
		s += msgp.NilSize
	} else {
		s += z.Myptr.MSGPMsgsize()
	}
	s += 18 + msgp.ArrayHeaderSize
	for zajk := range z.Myarray {
		s += msgp.StringPrefixSize + len(z.Myarray[zajk])
	}
	s += 18 + msgp.ArrayHeaderSize
	for zlnf := range z.MySlice {
		s += msgp.StringPrefixSize + len(z.MySlice[zlnf])
	}
	return
}

// MSGPfieldsNotEmpty supports omitempty tags
func (z *S2) MSGPfieldsNotEmpty(isempty []bool) uint32 {
	return 7
}

// MSGPMarshalMsg implements msgp.Marshaler
func (z *S2) MSGPMarshalMsg(b []byte) (o []byte, err error) {
	if p, ok := interface{}(z).(msgp.PreSave); ok {
		p.PreSaveHook()
	}

	o = msgp.Require(b, z.MSGPMsgsize())
	// map header, size 7
	// string "beta_zid01_str"
	o = append(o, 0x87, 0xae, 0x62, 0x65, 0x74, 0x61, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x31, 0x5f, 0x73, 0x74, 0x72)
	o = msgp.AppendString(o, z.B)
	// string "ralph_zid02_map"
	o = append(o, 0xaf, 0x72, 0x61, 0x6c, 0x70, 0x68, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x32, 0x5f, 0x6d, 0x61, 0x70)
	o = msgp.AppendMapHeader(o, uint32(len(z.R)))
	for zvhd, zehe := range z.R {
		o = msgp.AppendString(o, zvhd)
		o = msgp.AppendUint8(o, zehe)
	}
	// string "P_zid03_u16"
	o = append(o, 0xab, 0x50, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x33, 0x5f, 0x75, 0x31, 0x36)
	o = msgp.AppendUint16(o, z.P)
	// string "Q_zid04_u32"
	o = append(o, 0xab, 0x51, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x34, 0x5f, 0x75, 0x33, 0x32)
	o = msgp.AppendUint32(o, z.Q)
	// string "T_zid05_i64"
	o = append(o, 0xab, 0x54, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x35, 0x5f, 0x69, 0x36, 0x34)
	o = msgp.AppendInt64(o, z.T)
	// string "arr_zid06_ary"
	o = append(o, 0xad, 0x61, 0x72, 0x72, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x36, 0x5f, 0x61, 0x72, 0x79)
	o = msgp.AppendArrayHeader(o, 6)
	for zsuc := range z.Arr {
		o = msgp.AppendFloat64(o, z.Arr[zsuc])
	}
	// string "MyTree_zid07_ptr"
	o = append(o, 0xb0, 0x4d, 0x79, 0x54, 0x72, 0x65, 0x65, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x37, 0x5f, 0x70, 0x74, 0x72)
	if z.MyTree == nil {
		o = msgp.AppendNil(o)
	} else {
		o, err = z.MyTree.MSGPMarshalMsg(o)
		if err != nil {
			return
		}
	}
	return
}

// MSGPUnmarshalMsg implements msgp.Unmarshaler
func (z *S2) MSGPUnmarshalMsg(bts []byte) (o []byte, err error) {
	return z.MSGPUnmarshalMsgWithCfg(bts, nil)
}
func (z *S2) MSGPUnmarshalMsgWithCfg(bts []byte, cfg *msgp.RuntimeConfig) (o []byte, err error) {
	var nbs msgp.NilBitsStack
	nbs.Init(cfg)
	var sawTopNil bool
	if msgp.IsNil(bts) {
		sawTopNil = true
		bts = nbs.PushAlwaysNil(bts[1:])
	}

	var field []byte
	_ = field
	const maxFields2zjbn = 8

	// -- templateUnmarshalMsg starts here--
	var totalEncodedFields2zjbn uint32
	if !nbs.AlwaysNil {
		totalEncodedFields2zjbn, bts, err = nbs.ReadMapHeaderBytes(bts)
		if err != nil {
			return
		}
	}
	encodedFieldsLeft2zjbn := totalEncodedFields2zjbn
	missingFieldsLeft2zjbn := maxFields2zjbn - totalEncodedFields2zjbn

	var nextMiss2zjbn int32 = -1
	var found2zjbn [maxFields2zjbn]bool
	var curField2zjbn string

doneWithStruct2zjbn:
	// First fill all the encoded fields, then
	// treat the remaining, missing fields, as Nil.
	for encodedFieldsLeft2zjbn > 0 || missingFieldsLeft2zjbn > 0 {
		//fmt.Printf("encodedFieldsLeft: %v, missingFieldsLeft: %v, found: '%v', fields: '%#v'\n", encodedFieldsLeft2zjbn, missingFieldsLeft2zjbn, msgp.ShowFound(found2zjbn[:]), unmarshalMsgFieldOrder2zjbn)
		if encodedFieldsLeft2zjbn > 0 {
			encodedFieldsLeft2zjbn--
			field, bts, err = nbs.ReadMapKeyZC(bts)
			if err != nil {
				return
			}
			curField2zjbn = msgp.UnsafeString(field)
		} else {
			//missing fields need handling
			if nextMiss2zjbn < 0 {
				// set bts to contain just mnil (0xc0)
				bts = nbs.PushAlwaysNil(bts)
				nextMiss2zjbn = 0
			}
			for nextMiss2zjbn < maxFields2zjbn && (found2zjbn[nextMiss2zjbn] || unmarshalMsgFieldSkip2zjbn[nextMiss2zjbn]) {
				nextMiss2zjbn++
			}
			if nextMiss2zjbn == maxFields2zjbn {
				// filled all the empty fields!
				break doneWithStruct2zjbn
			}
			missingFieldsLeft2zjbn--
			curField2zjbn = unmarshalMsgFieldOrder2zjbn[nextMiss2zjbn]
		}
		//fmt.Printf("switching on curField: '%v'\n", curField2zjbn)
		switch curField2zjbn {
		// -- templateUnmarshalMsg ends here --

		case "beta_zid01_str":
			found2zjbn[1] = true
			z.B, bts, err = nbs.ReadStringBytes(bts)

			if err != nil {
				return
			}
		case "ralph_zid02_map":
			found2zjbn[2] = true
			if nbs.AlwaysNil {
				if len(z.R) > 0 {
					for key, _ := range z.R {
						delete(z.R, key)
					}
				}

			} else {

				var zjaa uint32
				zjaa, bts, err = nbs.ReadMapHeaderBytes(bts)
				if err != nil {
					return
				}
				if z.R == nil && zjaa > 0 {
					z.R = make(map[string]uint8, zjaa)
				} else if len(z.R) > 0 {
					for key, _ := range z.R {
						delete(z.R, key)
					}
				}
				for zjaa > 0 {
					var zvhd string
					var zehe uint8
					zjaa--
					zvhd, bts, err = nbs.ReadStringBytes(bts)
					if err != nil {
						return
					}
					zehe, bts, err = nbs.ReadUint8Bytes(bts)

					if err != nil {
						return
					}
					z.R[zvhd] = zehe
				}
			}
		case "P_zid03_u16":
			found2zjbn[3] = true
			z.P, bts, err = nbs.ReadUint16Bytes(bts)

			if err != nil {
				return
			}
		case "Q_zid04_u32":
			found2zjbn[4] = true
			z.Q, bts, err = nbs.ReadUint32Bytes(bts)

			if err != nil {
				return
			}
		case "T_zid05_i64":
			found2zjbn[5] = true
			z.T, bts, err = nbs.ReadInt64Bytes(bts)

			if err != nil {
				return
			}
		case "arr_zid06_ary":
			found2zjbn[6] = true
			var zuro uint32
			zuro, bts, err = nbs.ReadArrayHeaderBytes(bts)
			if err != nil {
				return
			}
			if !nbs.IsNil(bts) && zuro != 6 {
				err = msgp.ArrayError{Wanted: 6, Got: zuro}
				return
			}
			for zsuc := range z.Arr {
				z.Arr[zsuc], bts, err = nbs.ReadFloat64Bytes(bts)

				if err != nil {
					return
				}
			}
		case "MyTree_zid07_ptr":
			found2zjbn[7] = true
			if nbs.AlwaysNil {
				if z.MyTree != nil {
					z.MyTree.MSGPUnmarshalMsg(msgp.OnlyNilSlice)
				}
			} else {
				// not nbs.AlwaysNil
				if msgp.IsNil(bts) {
					bts = bts[1:]
					if nil != z.MyTree {
						z.MyTree.MSGPUnmarshalMsg(msgp.OnlyNilSlice)
					}
				} else {
					// not nbs.AlwaysNil and not IsNil(bts): have something to read

					if z.MyTree == nil {
						z.MyTree = new(Tree)
					}
					bts, err = z.MyTree.MSGPUnmarshalMsg(bts)
					if err != nil {
						return
					}
					if err != nil {
						return
					}
				}
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				return
			}
		}
	}
	if nextMiss2zjbn != -1 {
		bts = nbs.PopAlwaysNil()
	}

	if sawTopNil {
		bts = nbs.PopAlwaysNil()
	}
	o = bts
	if p, ok := interface{}(z).(msgp.PostLoad); ok {
		p.PostLoadHook()
	}

	return
}

// fields of S2
var unmarshalMsgFieldOrder2zjbn = []string{"", "beta_zid01_str", "ralph_zid02_map", "P_zid03_u16", "Q_zid04_u32", "T_zid05_i64", "arr_zid06_ary", "MyTree_zid07_ptr"}

var unmarshalMsgFieldSkip2zjbn = []bool{true, false, false, false, false, false, false, false}

// MSGPMsgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *S2) MSGPMsgsize() (s int) {
	s = 1 + 15 + msgp.StringPrefixSize + len(z.B) + 16 + msgp.MapHeaderSize
	if z.R != nil {
		for zvhd, zehe := range z.R {
			_ = zehe
			_ = zvhd
			s += msgp.StringPrefixSize + len(zvhd) + msgp.Uint8Size
		}
	}
	s += 12 + msgp.Uint16Size + 12 + msgp.Uint32Size + 12 + msgp.Int64Size + 14 + msgp.ArrayHeaderSize + (6 * (msgp.Float64Size)) + 17
	if z.MyTree == nil {
		s += msgp.NilSize
	} else {
		s += z.MyTree.MSGPMsgsize()
	}
	return
}

// MSGPfieldsNotEmpty supports omitempty tags
func (z Sys) MSGPfieldsNotEmpty(isempty []bool) uint32 {
	return 1
}

// MSGPMarshalMsg implements msgp.Marshaler
func (z Sys) MSGPMarshalMsg(b []byte) (o []byte, err error) {
	if p, ok := interface{}(z).(msgp.PreSave); ok {
		p.PreSaveHook()
	}

	o = msgp.Require(b, z.MSGPMsgsize())
	// map header, size 1
	// string "F_zid00_ifc"
	o = append(o, 0x81, 0xab, 0x46, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x30, 0x5f, 0x69, 0x66, 0x63)
	o, err = msgp.AppendIntf(o, z.F)
	if err != nil {
		return
	}
	return
}

// MSGPUnmarshalMsg implements msgp.Unmarshaler
func (z *Sys) MSGPUnmarshalMsg(bts []byte) (o []byte, err error) {
	return z.MSGPUnmarshalMsgWithCfg(bts, nil)
}
func (z *Sys) MSGPUnmarshalMsgWithCfg(bts []byte, cfg *msgp.RuntimeConfig) (o []byte, err error) {
	var nbs msgp.NilBitsStack
	nbs.Init(cfg)
	var sawTopNil bool
	if msgp.IsNil(bts) {
		sawTopNil = true
		bts = nbs.PushAlwaysNil(bts[1:])
	}

	var field []byte
	_ = field
	const maxFields3zxkp = 1

	// -- templateUnmarshalMsg starts here--
	var totalEncodedFields3zxkp uint32
	if !nbs.AlwaysNil {
		totalEncodedFields3zxkp, bts, err = nbs.ReadMapHeaderBytes(bts)
		if err != nil {
			return
		}
	}
	encodedFieldsLeft3zxkp := totalEncodedFields3zxkp
	missingFieldsLeft3zxkp := maxFields3zxkp - totalEncodedFields3zxkp

	var nextMiss3zxkp int32 = -1
	var found3zxkp [maxFields3zxkp]bool
	var curField3zxkp string

doneWithStruct3zxkp:
	// First fill all the encoded fields, then
	// treat the remaining, missing fields, as Nil.
	for encodedFieldsLeft3zxkp > 0 || missingFieldsLeft3zxkp > 0 {
		//fmt.Printf("encodedFieldsLeft: %v, missingFieldsLeft: %v, found: '%v', fields: '%#v'\n", encodedFieldsLeft3zxkp, missingFieldsLeft3zxkp, msgp.ShowFound(found3zxkp[:]), unmarshalMsgFieldOrder3zxkp)
		if encodedFieldsLeft3zxkp > 0 {
			encodedFieldsLeft3zxkp--
			field, bts, err = nbs.ReadMapKeyZC(bts)
			if err != nil {
				return
			}
			curField3zxkp = msgp.UnsafeString(field)
		} else {
			//missing fields need handling
			if nextMiss3zxkp < 0 {
				// set bts to contain just mnil (0xc0)
				bts = nbs.PushAlwaysNil(bts)
				nextMiss3zxkp = 0
			}
			for nextMiss3zxkp < maxFields3zxkp && (found3zxkp[nextMiss3zxkp] || unmarshalMsgFieldSkip3zxkp[nextMiss3zxkp]) {
				nextMiss3zxkp++
			}
			if nextMiss3zxkp == maxFields3zxkp {
				// filled all the empty fields!
				break doneWithStruct3zxkp
			}
			missingFieldsLeft3zxkp--
			curField3zxkp = unmarshalMsgFieldOrder3zxkp[nextMiss3zxkp]
		}
		//fmt.Printf("switching on curField: '%v'\n", curField3zxkp)
		switch curField3zxkp {
		// -- templateUnmarshalMsg ends here --

		case "F_zid00_ifc":
			found3zxkp[0] = true
			z.F, bts, err = nbs.ReadIntfBytes(bts)

			if err != nil {
				return
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				return
			}
		}
	}
	if nextMiss3zxkp != -1 {
		bts = nbs.PopAlwaysNil()
	}

	if sawTopNil {
		bts = nbs.PopAlwaysNil()
	}
	o = bts
	if p, ok := interface{}(z).(msgp.PostLoad); ok {
		p.PostLoadHook()
	}

	return
}

// fields of Sys
var unmarshalMsgFieldOrder3zxkp = []string{"F_zid00_ifc"}

var unmarshalMsgFieldSkip3zxkp = []bool{false}

// MSGPMsgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z Sys) MSGPMsgsize() (s int) {
	s = 1 + 12 + msgp.GuessSize(z.F)
	return
}

// MSGPfieldsNotEmpty supports omitempty tags
func (z *Tree) MSGPfieldsNotEmpty(isempty []bool) uint32 {
	return 3
}

// MSGPMarshalMsg implements msgp.Marshaler
func (z *Tree) MSGPMarshalMsg(b []byte) (o []byte, err error) {
	if p, ok := interface{}(z).(msgp.PreSave); ok {
		p.PreSaveHook()
	}

	o = msgp.Require(b, z.MSGPMsgsize())
	// map header, size 3
	// string "Chld_zid00_slc"
	o = append(o, 0x83, 0xae, 0x43, 0x68, 0x6c, 0x64, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x30, 0x5f, 0x73, 0x6c, 0x63)
	o = msgp.AppendArrayHeader(o, uint32(len(z.Chld)))
	for zgpf := range z.Chld {
		o, err = z.Chld[zgpf].MSGPMarshalMsg(o)
		if err != nil {
			return
		}
	}
	// string "Str_zid01_str"
	o = append(o, 0xad, 0x53, 0x74, 0x72, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x31, 0x5f, 0x73, 0x74, 0x72)
	o = msgp.AppendString(o, z.Str)
	// string "Par_zid02_ptr"
	o = append(o, 0xad, 0x50, 0x61, 0x72, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x32, 0x5f, 0x70, 0x74, 0x72)
	if z.Par == nil {
		o = msgp.AppendNil(o)
	} else {
		o, err = z.Par.MSGPMarshalMsg(o)
		if err != nil {
			return
		}
	}
	return
}

// MSGPUnmarshalMsg implements msgp.Unmarshaler
func (z *Tree) MSGPUnmarshalMsg(bts []byte) (o []byte, err error) {
	return z.MSGPUnmarshalMsgWithCfg(bts, nil)
}
func (z *Tree) MSGPUnmarshalMsgWithCfg(bts []byte, cfg *msgp.RuntimeConfig) (o []byte, err error) {
	var nbs msgp.NilBitsStack
	nbs.Init(cfg)
	var sawTopNil bool
	if msgp.IsNil(bts) {
		sawTopNil = true
		bts = nbs.PushAlwaysNil(bts[1:])
	}

	var field []byte
	_ = field
	const maxFields4zzdu = 3

	// -- templateUnmarshalMsg starts here--
	var totalEncodedFields4zzdu uint32
	if !nbs.AlwaysNil {
		totalEncodedFields4zzdu, bts, err = nbs.ReadMapHeaderBytes(bts)
		if err != nil {
			return
		}
	}
	encodedFieldsLeft4zzdu := totalEncodedFields4zzdu
	missingFieldsLeft4zzdu := maxFields4zzdu - totalEncodedFields4zzdu

	var nextMiss4zzdu int32 = -1
	var found4zzdu [maxFields4zzdu]bool
	var curField4zzdu string

doneWithStruct4zzdu:
	// First fill all the encoded fields, then
	// treat the remaining, missing fields, as Nil.
	for encodedFieldsLeft4zzdu > 0 || missingFieldsLeft4zzdu > 0 {
		//fmt.Printf("encodedFieldsLeft: %v, missingFieldsLeft: %v, found: '%v', fields: '%#v'\n", encodedFieldsLeft4zzdu, missingFieldsLeft4zzdu, msgp.ShowFound(found4zzdu[:]), unmarshalMsgFieldOrder4zzdu)
		if encodedFieldsLeft4zzdu > 0 {
			encodedFieldsLeft4zzdu--
			field, bts, err = nbs.ReadMapKeyZC(bts)
			if err != nil {
				return
			}
			curField4zzdu = msgp.UnsafeString(field)
		} else {
			//missing fields need handling
			if nextMiss4zzdu < 0 {
				// set bts to contain just mnil (0xc0)
				bts = nbs.PushAlwaysNil(bts)
				nextMiss4zzdu = 0
			}
			for nextMiss4zzdu < maxFields4zzdu && (found4zzdu[nextMiss4zzdu] || unmarshalMsgFieldSkip4zzdu[nextMiss4zzdu]) {
				nextMiss4zzdu++
			}
			if nextMiss4zzdu == maxFields4zzdu {
				// filled all the empty fields!
				break doneWithStruct4zzdu
			}
			missingFieldsLeft4zzdu--
			curField4zzdu = unmarshalMsgFieldOrder4zzdu[nextMiss4zzdu]
		}
		//fmt.Printf("switching on curField: '%v'\n", curField4zzdu)
		switch curField4zzdu {
		// -- templateUnmarshalMsg ends here --

		case "Chld_zid00_slc":
			found4zzdu[0] = true
			if nbs.AlwaysNil {
				(z.Chld) = (z.Chld)[:0]
			} else {

				var zynz uint32
				zynz, bts, err = nbs.ReadArrayHeaderBytes(bts)
				if err != nil {
					return
				}
				if cap(z.Chld) >= int(zynz) {
					z.Chld = (z.Chld)[:zynz]
				} else {
					z.Chld = make([]Tree, zynz)
				}
				for zgpf := range z.Chld {
					bts, err = z.Chld[zgpf].MSGPUnmarshalMsg(bts)
					if err != nil {
						return
					}
					if err != nil {
						return
					}
				}
			}
		case "Str_zid01_str":
			found4zzdu[1] = true
			z.Str, bts, err = nbs.ReadStringBytes(bts)

			if err != nil {
				return
			}
		case "Par_zid02_ptr":
			found4zzdu[2] = true
			if nbs.AlwaysNil {
				if z.Par != nil {
					z.Par.MSGPUnmarshalMsg(msgp.OnlyNilSlice)
				}
			} else {
				// not nbs.AlwaysNil
				if msgp.IsNil(bts) {
					bts = bts[1:]
					if nil != z.Par {
						z.Par.MSGPUnmarshalMsg(msgp.OnlyNilSlice)
					}
				} else {
					// not nbs.AlwaysNil and not IsNil(bts): have something to read

					if z.Par == nil {
						z.Par = new(S2)
					}
					bts, err = z.Par.MSGPUnmarshalMsg(bts)
					if err != nil {
						return
					}
					if err != nil {
						return
					}
				}
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				return
			}
		}
	}
	if nextMiss4zzdu != -1 {
		bts = nbs.PopAlwaysNil()
	}

	if sawTopNil {
		bts = nbs.PopAlwaysNil()
	}
	o = bts
	if p, ok := interface{}(z).(msgp.PostLoad); ok {
		p.PostLoadHook()
	}

	return
}

// fields of Tree
var unmarshalMsgFieldOrder4zzdu = []string{"Chld_zid00_slc", "Str_zid01_str", "Par_zid02_ptr"}

var unmarshalMsgFieldSkip4zzdu = []bool{false, false, false}

// MSGPMsgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *Tree) MSGPMsgsize() (s int) {
	s = 1 + 15 + msgp.ArrayHeaderSize
	for zgpf := range z.Chld {
		s += z.Chld[zgpf].MSGPMsgsize()
	}
	s += 14 + msgp.StringPrefixSize + len(z.Str) + 14
	if z.Par == nil {
		s += msgp.NilSize
	} else {
		s += z.Par.MSGPMsgsize()
	}
	return
}

// FileMy_msgp holds ZebraPack schema from file 'testdata/my.go'
type FileMy_msgp struct{}

// MSGPZebraSchemaInMsgpack2Format provides the ZebraPack Schema in msgpack2 format, length 3366 bytes
func (FileMy_msgp) MSGPZebraSchemaInMsgpack2Format() []byte {
	return []byte{
		0x85, 0xaa, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x50, 0x61,
		0x74, 0x68, 0xae, 0x74, 0x65, 0x73, 0x74, 0x64, 0x61, 0x74,
		0x61, 0x2f, 0x6d, 0x79, 0x2e, 0x67, 0x6f, 0xad, 0x53, 0x6f,
		0x75, 0x72, 0x63, 0x65, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67,
		0x65, 0xa8, 0x74, 0x65, 0x73, 0x74, 0x64, 0x61, 0x74, 0x61,
		0xad, 0x5a, 0x65, 0x62, 0x72, 0x61, 0x53, 0x63, 0x68, 0x65,
		0x6d, 0x61, 0x49, 0x64, 0xd3, 0x00, 0x06, 0xeb, 0x25, 0xcc,
		0x0f, 0x9a, 0x3e, 0xa7, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74,
		0x73, 0x85, 0xa3, 0x53, 0x79, 0x73, 0x82, 0xaa, 0x53, 0x74,
		0x72, 0x75, 0x63, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0xa3, 0x53,
		0x79, 0x73, 0xa6, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x91,
		0x87, 0xa3, 0x5a, 0x69, 0x64, 0x00, 0xab, 0x46, 0x69, 0x65,
		0x6c, 0x64, 0x47, 0x6f, 0x4e, 0x61, 0x6d, 0x65, 0xa1, 0x46,
		0xac, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x54, 0x61, 0x67, 0x4e,
		0x61, 0x6d, 0x65, 0xa1, 0x46, 0xac, 0x46, 0x69, 0x65, 0x6c,
		0x64, 0x54, 0x79, 0x70, 0x65, 0x53, 0x74, 0x72, 0xab, 0x69,
		0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x7b, 0x7d,
		0xad, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x43, 0x61, 0x74, 0x65,
		0x67, 0x6f, 0x72, 0x79, 0x17, 0xae, 0x46, 0x69, 0x65, 0x6c,
		0x64, 0x50, 0x72, 0x69, 0x6d, 0x69, 0x74, 0x69, 0x76, 0x65,
		0x13, 0xad, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x46, 0x75, 0x6c,
		0x6c, 0x54, 0x79, 0x70, 0x65, 0x82, 0xa4, 0x4b, 0x69, 0x6e,
		0x64, 0x13, 0xa3, 0x53, 0x74, 0x72, 0xa4, 0x49, 0x6e, 0x74,
		0x66, 0xa2, 0x53, 0x32, 0x82, 0xaa, 0x53, 0x74, 0x72, 0x75,
		0x63, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0xa2, 0x53, 0x32, 0xa6,
		0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x98, 0x84, 0xa3, 0x5a,
		0x69, 0x64, 0x00, 0xab, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x47,
		0x6f, 0x4e, 0x61, 0x6d, 0x65, 0xa1, 0x41, 0xac, 0x46, 0x69,
		0x65, 0x6c, 0x64, 0x54, 0x61, 0x67, 0x4e, 0x61, 0x6d, 0x65,
		0xa5, 0x61, 0x6c, 0x70, 0x68, 0x61, 0xa4, 0x53, 0x6b, 0x69,
		0x70, 0xc3, 0x87, 0xa3, 0x5a, 0x69, 0x64, 0x01, 0xab, 0x46,
		0x69, 0x65, 0x6c, 0x64, 0x47, 0x6f, 0x4e, 0x61, 0x6d, 0x65,
		0xa1, 0x42, 0xac, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x54, 0x61,
		0x67, 0x4e, 0x61, 0x6d, 0x65, 0xa4, 0x62, 0x65, 0x74, 0x61,
		0xac, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x54, 0x79, 0x70, 0x65,
		0x53, 0x74, 0x72, 0xa6, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67,
		0xad, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x43, 0x61, 0x74, 0x65,
		0x67, 0x6f, 0x72, 0x79, 0x17, 0xae, 0x46, 0x69, 0x65, 0x6c,
		0x64, 0x50, 0x72, 0x69, 0x6d, 0x69, 0x74, 0x69, 0x76, 0x65,
		0x02, 0xad, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x46, 0x75, 0x6c,
		0x6c, 0x54, 0x79, 0x70, 0x65, 0x82, 0xa4, 0x4b, 0x69, 0x6e,
		0x64, 0x02, 0xa3, 0x53, 0x74, 0x72, 0xa6, 0x73, 0x74, 0x72,
		0x69, 0x6e, 0x67, 0x86, 0xa3, 0x5a, 0x69, 0x64, 0x02, 0xab,
		0x46, 0x69, 0x65, 0x6c, 0x64, 0x47, 0x6f, 0x4e, 0x61, 0x6d,
		0x65, 0xa1, 0x52, 0xac, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x54,
		0x61, 0x67, 0x4e, 0x61, 0x6d, 0x65, 0xa5, 0x72, 0x61, 0x6c,
		0x70, 0x68, 0xac, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x54, 0x79,
		0x70, 0x65, 0x53, 0x74, 0x72, 0xb0, 0x6d, 0x61, 0x70, 0x5b,
		0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5d, 0x75, 0x69, 0x6e,
		0x74, 0x38, 0xad, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x43, 0x61,
		0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x18, 0xad, 0x46, 0x69,
		0x65, 0x6c, 0x64, 0x46, 0x75, 0x6c, 0x6c, 0x54, 0x79, 0x70,
		0x65, 0x84, 0xa4, 0x4b, 0x69, 0x6e, 0x64, 0x18, 0xa3, 0x53,
		0x74, 0x72, 0xa3, 0x4d, 0x61, 0x70, 0xa6, 0x44, 0x6f, 0x6d,
		0x61, 0x69, 0x6e, 0x82, 0xa4, 0x4b, 0x69, 0x6e, 0x64, 0x02,
		0xa3, 0x53, 0x74, 0x72, 0xa6, 0x73, 0x74, 0x72, 0x69, 0x6e,
		0x67, 0xa5, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x82, 0xa4, 0x4b,
		0x69, 0x6e, 0x64, 0x08, 0xa3, 0x53, 0x74, 0x72, 0xa5, 0x75,
		0x69, 0x6e, 0x74, 0x38, 0x88, 0xa3, 0x5a, 0x69, 0x64, 0x03,
		0xab, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x47, 0x6f, 0x4e, 0x61,
		0x6d, 0x65, 0xa1, 0x50, 0xac, 0x46, 0x69, 0x65, 0x6c, 0x64,
		0x54, 0x61, 0x67, 0x4e, 0x61, 0x6d, 0x65, 0xa1, 0x50, 0xac,
		0x46, 0x69, 0x65, 0x6c, 0x64, 0x54, 0x79, 0x70, 0x65, 0x53,
		0x74, 0x72, 0xa6, 0x75, 0x69, 0x6e, 0x74, 0x31, 0x36, 0xad,
		0x46, 0x69, 0x65, 0x6c, 0x64, 0x43, 0x61, 0x74, 0x65, 0x67,
		0x6f, 0x72, 0x79, 0x17, 0xae, 0x46, 0x69, 0x65, 0x6c, 0x64,
		0x50, 0x72, 0x69, 0x6d, 0x69, 0x74, 0x69, 0x76, 0x65, 0x09,
		0xad, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x46, 0x75, 0x6c, 0x6c,
		0x54, 0x79, 0x70, 0x65, 0x82, 0xa4, 0x4b, 0x69, 0x6e, 0x64,
		0x09, 0xa3, 0x53, 0x74, 0x72, 0xa6, 0x75, 0x69, 0x6e, 0x74,
		0x31, 0x36, 0xaa, 0x44, 0x65, 0x70, 0x72, 0x65, 0x63, 0x61,
		0x74, 0x65, 0x64, 0xc3, 0x87, 0xa3, 0x5a, 0x69, 0x64, 0x04,
		0xab, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x47, 0x6f, 0x4e, 0x61,
		0x6d, 0x65, 0xa1, 0x51, 0xac, 0x46, 0x69, 0x65, 0x6c, 0x64,
		0x54, 0x61, 0x67, 0x4e, 0x61, 0x6d, 0x65, 0xa1, 0x51, 0xac,
		0x46, 0x69, 0x65, 0x6c, 0x64, 0x54, 0x79, 0x70, 0x65, 0x53,
		0x74, 0x72, 0xa6, 0x75, 0x69, 0x6e, 0x74, 0x33, 0x32, 0xad,
		0x46, 0x69, 0x65, 0x6c, 0x64, 0x43, 0x61, 0x74, 0x65, 0x67,
		0x6f, 0x72, 0x79, 0x17, 0xae, 0x46, 0x69, 0x65, 0x6c, 0x64,
		0x50, 0x72, 0x69, 0x6d, 0x69, 0x74, 0x69, 0x76, 0x65, 0x0a,
		0xad, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x46, 0x75, 0x6c, 0x6c,
		0x54, 0x79, 0x70, 0x65, 0x82, 0xa4, 0x4b, 0x69, 0x6e, 0x64,
		0x0a, 0xa3, 0x53, 0x74, 0x72, 0xa6, 0x75, 0x69, 0x6e, 0x74,
		0x33, 0x32, 0x88, 0xa3, 0x5a, 0x69, 0x64, 0x05, 0xab, 0x46,
		0x69, 0x65, 0x6c, 0x64, 0x47, 0x6f, 0x4e, 0x61, 0x6d, 0x65,
		0xa1, 0x54, 0xac, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x54, 0x61,
		0x67, 0x4e, 0x61, 0x6d, 0x65, 0xa1, 0x54, 0xac, 0x46, 0x69,
		0x65, 0x6c, 0x64, 0x54, 0x79, 0x70, 0x65, 0x53, 0x74, 0x72,
		0xa5, 0x69, 0x6e, 0x74, 0x36, 0x34, 0xad, 0x46, 0x69, 0x65,
		0x6c, 0x64, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79,
		0x17, 0xae, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x50, 0x72, 0x69,
		0x6d, 0x69, 0x74, 0x69, 0x76, 0x65, 0x11, 0xad, 0x46, 0x69,
		0x65, 0x6c, 0x64, 0x46, 0x75, 0x6c, 0x6c, 0x54, 0x79, 0x70,
		0x65, 0x82, 0xa4, 0x4b, 0x69, 0x6e, 0x64, 0x11, 0xa3, 0x53,
		0x74, 0x72, 0xa5, 0x69, 0x6e, 0x74, 0x36, 0x34, 0xa8, 0x53,
		0x68, 0x6f, 0x77, 0x5a, 0x65, 0x72, 0x6f, 0xc3, 0x86, 0xa3,
		0x5a, 0x69, 0x64, 0x06, 0xab, 0x46, 0x69, 0x65, 0x6c, 0x64,
		0x47, 0x6f, 0x4e, 0x61, 0x6d, 0x65, 0xa3, 0x41, 0x72, 0x72,
		0xac, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x54, 0x61, 0x67, 0x4e,
		0x61, 0x6d, 0x65, 0xa3, 0x61, 0x72, 0x72, 0xac, 0x46, 0x69,
		0x65, 0x6c, 0x64, 0x54, 0x79, 0x70, 0x65, 0x53, 0x74, 0x72,
		0xd9, 0x21, 0x5b, 0x6d, 0x73, 0x67, 0x70, 0x2e, 0x45, 0x78,
		0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x65,
		0x66, 0x69, 0x78, 0x53, 0x69, 0x7a, 0x65, 0x5d, 0x66, 0x6c,
		0x6f, 0x61, 0x74, 0x36, 0x34, 0xad, 0x46, 0x69, 0x65, 0x6c,
		0x64, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x1b,
		0xad, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x46, 0x75, 0x6c, 0x6c,
		0x54, 0x79, 0x70, 0x65, 0x84, 0xa4, 0x4b, 0x69, 0x6e, 0x64,
		0x1b, 0xa3, 0x53, 0x74, 0x72, 0xa5, 0x41, 0x72, 0x72, 0x61,
		0x79, 0xa6, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x82, 0xa4,
		0x4b, 0x69, 0x6e, 0x64, 0x06, 0xa3, 0x53, 0x74, 0x72, 0xb8,
		0x6d, 0x73, 0x67, 0x70, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e,
		0x73, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78,
		0x53, 0x69, 0x7a, 0x65, 0xa5, 0x52, 0x61, 0x6e, 0x67, 0x65,
		0x82, 0xa4, 0x4b, 0x69, 0x6e, 0x64, 0x04, 0xa3, 0x53, 0x74,
		0x72, 0xa7, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x36, 0x34, 0x86,
		0xa3, 0x5a, 0x69, 0x64, 0x07, 0xab, 0x46, 0x69, 0x65, 0x6c,
		0x64, 0x47, 0x6f, 0x4e, 0x61, 0x6d, 0x65, 0xa6, 0x4d, 0x79,
		0x54, 0x72, 0x65, 0x65, 0xac, 0x46, 0x69, 0x65, 0x6c, 0x64,
		0x54, 0x61, 0x67, 0x4e, 0x61, 0x6d, 0x65, 0xa6, 0x4d, 0x79,
		0x54, 0x72, 0x65, 0x65, 0xac, 0x46, 0x69, 0x65, 0x6c, 0x64,
		0x54, 0x79, 0x70, 0x65, 0x53, 0x74, 0x72, 0xa5, 0x2a, 0x54,
		0x72, 0x65, 0x65, 0xad, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x43,
		0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x1c, 0xad, 0x46,
		0x69, 0x65, 0x6c, 0x64, 0x46, 0x75, 0x6c, 0x6c, 0x54, 0x79,
		0x70, 0x65, 0x83, 0xa4, 0x4b, 0x69, 0x6e, 0x64, 0x1c, 0xa3,
		0x53, 0x74, 0x72, 0xa7, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x65,
		0x72, 0xa6, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x82, 0xa4,
		0x4b, 0x69, 0x6e, 0x64, 0x16, 0xa3, 0x53, 0x74, 0x72, 0xa4,
		0x54, 0x72, 0x65, 0x65, 0xa4, 0x54, 0x72, 0x65, 0x65, 0x82,
		0xaa, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x4e, 0x61, 0x6d,
		0x65, 0xa4, 0x54, 0x72, 0x65, 0x65, 0xa6, 0x46, 0x69, 0x65,
		0x6c, 0x64, 0x73, 0x93, 0x86, 0xa3, 0x5a, 0x69, 0x64, 0x00,
		0xab, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x47, 0x6f, 0x4e, 0x61,
		0x6d, 0x65, 0xa4, 0x43, 0x68, 0x6c, 0x64, 0xac, 0x46, 0x69,
		0x65, 0x6c, 0x64, 0x54, 0x61, 0x67, 0x4e, 0x61, 0x6d, 0x65,
		0xa4, 0x43, 0x68, 0x6c, 0x64, 0xac, 0x46, 0x69, 0x65, 0x6c,
		0x64, 0x54, 0x79, 0x70, 0x65, 0x53, 0x74, 0x72, 0xa6, 0x5b,
		0x5d, 0x54, 0x72, 0x65, 0x65, 0xad, 0x46, 0x69, 0x65, 0x6c,
		0x64, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x1a,
		0xad, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x46, 0x75, 0x6c, 0x6c,
		0x54, 0x79, 0x70, 0x65, 0x83, 0xa4, 0x4b, 0x69, 0x6e, 0x64,
		0x1a, 0xa3, 0x53, 0x74, 0x72, 0xa5, 0x53, 0x6c, 0x69, 0x63,
		0x65, 0xa6, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x82, 0xa4,
		0x4b, 0x69, 0x6e, 0x64, 0x16, 0xa3, 0x53, 0x74, 0x72, 0xa4,
		0x54, 0x72, 0x65, 0x65, 0x87, 0xa3, 0x5a, 0x69, 0x64, 0x01,
		0xab, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x47, 0x6f, 0x4e, 0x61,
		0x6d, 0x65, 0xa3, 0x53, 0x74, 0x72, 0xac, 0x46, 0x69, 0x65,
		0x6c, 0x64, 0x54, 0x61, 0x67, 0x4e, 0x61, 0x6d, 0x65, 0xa3,
		0x53, 0x74, 0x72, 0xac, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x54,
		0x79, 0x70, 0x65, 0x53, 0x74, 0x72, 0xa6, 0x73, 0x74, 0x72,
		0x69, 0x6e, 0x67, 0xad, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x43,
		0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x17, 0xae, 0x46,
		0x69, 0x65, 0x6c, 0x64, 0x50, 0x72, 0x69, 0x6d, 0x69, 0x74,
		0x69, 0x76, 0x65, 0x02, 0xad, 0x46, 0x69, 0x65, 0x6c, 0x64,
		0x46, 0x75, 0x6c, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x82, 0xa4,
		0x4b, 0x69, 0x6e, 0x64, 0x02, 0xa3, 0x53, 0x74, 0x72, 0xa6,
		0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x86, 0xa3, 0x5a, 0x69,
		0x64, 0x02, 0xab, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x47, 0x6f,
		0x4e, 0x61, 0x6d, 0x65, 0xa3, 0x50, 0x61, 0x72, 0xac, 0x46,
		0x69, 0x65, 0x6c, 0x64, 0x54, 0x61, 0x67, 0x4e, 0x61, 0x6d,
		0x65, 0xa3, 0x50, 0x61, 0x72, 0xac, 0x46, 0x69, 0x65, 0x6c,
		0x64, 0x54, 0x79, 0x70, 0x65, 0x53, 0x74, 0x72, 0xa3, 0x2a,
		0x53, 0x32, 0xad, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x43, 0x61,
		0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x1c, 0xad, 0x46, 0x69,
		0x65, 0x6c, 0x64, 0x46, 0x75, 0x6c, 0x6c, 0x54, 0x79, 0x70,
		0x65, 0x83, 0xa4, 0x4b, 0x69, 0x6e, 0x64, 0x1c, 0xa3, 0x53,
		0x74, 0x72, 0xa7, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x65, 0x72,
		0xa6, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x82, 0xa4, 0x4b,
		0x69, 0x6e, 0x64, 0x16, 0xa3, 0x53, 0x74, 0x72, 0xa2, 0x53,
		0x32, 0xa3, 0x42, 0x69, 0x67, 0x82, 0xaa, 0x53, 0x74, 0x72,
		0x75, 0x63, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0xa3, 0x42, 0x69,
		0x67, 0xa6, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x95, 0x87,
		0xa3, 0x5a, 0x69, 0x64, 0x00, 0xab, 0x46, 0x69, 0x65, 0x6c,
		0x64, 0x47, 0x6f, 0x4e, 0x61, 0x6d, 0x65, 0xa5, 0x53, 0x6c,
		0x69, 0x63, 0x65, 0xac, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x54,
		0x61, 0x67, 0x4e, 0x61, 0x6d, 0x65, 0xa5, 0x53, 0x6c, 0x69,
		0x63, 0x65, 0xac, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x54, 0x79,
		0x70, 0x65, 0x53, 0x74, 0x72, 0xa4, 0x5b, 0x5d, 0x53, 0x32,
		0xad, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x43, 0x61, 0x74, 0x65,
		0x67, 0x6f, 0x72, 0x79, 0x1a, 0xad, 0x46, 0x69, 0x65, 0x6c,
		0x64, 0x46, 0x75, 0x6c, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x83,
		0xa4, 0x4b, 0x69, 0x6e, 0x64, 0x1a, 0xa3, 0x53, 0x74, 0x72,
		0xa5, 0x53, 0x6c, 0x69, 0x63, 0x65, 0xa6, 0x44, 0x6f, 0x6d,
		0x61, 0x69, 0x6e, 0x82, 0xa4, 0x4b, 0x69, 0x6e, 0x64, 0x16,
		0xa3, 0x53, 0x74, 0x72, 0xa2, 0x53, 0x32, 0xa8, 0x53, 0x68,
		0x6f, 0x77, 0x5a, 0x65, 0x72, 0x6f, 0xc3, 0x87, 0xa3, 0x5a,
		0x69, 0x64, 0x01, 0xab, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x47,
		0x6f, 0x4e, 0x61, 0x6d, 0x65, 0xa9, 0x54, 0x72, 0x61, 0x6e,
		0x73, 0x66, 0x6f, 0x72, 0x6d, 0xac, 0x46, 0x69, 0x65, 0x6c,
		0x64, 0x54, 0x61, 0x67, 0x4e, 0x61, 0x6d, 0x65, 0xa9, 0x54,
		0x72, 0x61, 0x6e, 0x73, 0x66, 0x6f, 0x72, 0x6d, 0xac, 0x46,
		0x69, 0x65, 0x6c, 0x64, 0x54, 0x79, 0x70, 0x65, 0x53, 0x74,
		0x72, 0xab, 0x6d, 0x61, 0x70, 0x5b, 0x69, 0x6e, 0x74, 0x5d,
		0x2a, 0x53, 0x32, 0xad, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x43,
		0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x18, 0xad, 0x46,
		0x69, 0x65, 0x6c, 0x64, 0x46, 0x75, 0x6c, 0x6c, 0x54, 0x79,
		0x70, 0x65, 0x84, 0xa4, 0x4b, 0x69, 0x6e, 0x64, 0x18, 0xa3,
		0x53, 0x74, 0x72, 0xa3, 0x4d, 0x61, 0x70, 0xa6, 0x44, 0x6f,
		0x6d, 0x61, 0x69, 0x6e, 0x82, 0xa4, 0x4b, 0x69, 0x6e, 0x64,
		0x0d, 0xa3, 0x53, 0x74, 0x72, 0xa3, 0x69, 0x6e, 0x74, 0xa5,
		0x52, 0x61, 0x6e, 0x67, 0x65, 0x83, 0xa4, 0x4b, 0x69, 0x6e,
		0x64, 0x1c, 0xa3, 0x53, 0x74, 0x72, 0xa7, 0x50, 0x6f, 0x69,
		0x6e, 0x74, 0x65, 0x72, 0xa6, 0x44, 0x6f, 0x6d, 0x61, 0x69,
		0x6e, 0x82, 0xa4, 0x4b, 0x69, 0x6e, 0x64, 0x16, 0xa3, 0x53,
		0x74, 0x72, 0xa2, 0x53, 0x32, 0xa8, 0x53, 0x68, 0x6f, 0x77,
		0x5a, 0x65, 0x72, 0x6f, 0xc3, 0x87, 0xa3, 0x5a, 0x69, 0x64,
		0x02, 0xab, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x47, 0x6f, 0x4e,
		0x61, 0x6d, 0x65, 0xa5, 0x4d, 0x79, 0x70, 0x74, 0x72, 0xac,
		0x46, 0x69, 0x65, 0x6c, 0x64, 0x54, 0x61, 0x67, 0x4e, 0x61,
		0x6d, 0x65, 0xa5, 0x4d, 0x79, 0x70, 0x74, 0x72, 0xac, 0x46,
		0x69, 0x65, 0x6c, 0x64, 0x54, 0x79, 0x70, 0x65, 0x53, 0x74,
		0x72, 0xa3, 0x2a, 0x53, 0x32, 0xad, 0x46, 0x69, 0x65, 0x6c,
		0x64, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x1c,
		0xad, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x46, 0x75, 0x6c, 0x6c,
		0x54, 0x79, 0x70, 0x65, 0x83, 0xa4, 0x4b, 0x69, 0x6e, 0x64,
		0x1c, 0xa3, 0x53, 0x74, 0x72, 0xa7, 0x50, 0x6f, 0x69, 0x6e,
		0x74, 0x65, 0x72, 0xa6, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e,
		0x82, 0xa4, 0x4b, 0x69, 0x6e, 0x64, 0x16, 0xa3, 0x53, 0x74,
		0x72, 0xa2, 0x53, 0x32, 0xa8, 0x53, 0x68, 0x6f, 0x77, 0x5a,
		0x65, 0x72, 0x6f, 0xc3, 0x87, 0xa3, 0x5a, 0x69, 0x64, 0x03,
		0xab, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x47, 0x6f, 0x4e, 0x61,
		0x6d, 0x65, 0xa7, 0x4d, 0x79, 0x61, 0x72, 0x72, 0x61, 0x79,
		0xac, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x54, 0x61, 0x67, 0x4e,
		0x61, 0x6d, 0x65, 0xa7, 0x4d, 0x79, 0x61, 0x72, 0x72, 0x61,
		0x79, 0xac, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x54, 0x79, 0x70,
		0x65, 0x53, 0x74, 0x72, 0xa9, 0x5b, 0x33, 0x5d, 0x73, 0x74,
		0x72, 0x69, 0x6e, 0x67, 0xad, 0x46, 0x69, 0x65, 0x6c, 0x64,
		0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x1b, 0xad,
		0x46, 0x69, 0x65, 0x6c, 0x64, 0x46, 0x75, 0x6c, 0x6c, 0x54,
		0x79, 0x70, 0x65, 0x84, 0xa4, 0x4b, 0x69, 0x6e, 0x64, 0x1b,
		0xa3, 0x53, 0x74, 0x72, 0xa5, 0x41, 0x72, 0x72, 0x61, 0x79,
		0xa6, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x82, 0xa4, 0x4b,
		0x69, 0x6e, 0x64, 0x03, 0xa3, 0x53, 0x74, 0x72, 0xa1, 0x33,
		0xa5, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x82, 0xa4, 0x4b, 0x69,
		0x6e, 0x64, 0x02, 0xa3, 0x53, 0x74, 0x72, 0xa6, 0x73, 0x74,
		0x72, 0x69, 0x6e, 0x67, 0xa8, 0x53, 0x68, 0x6f, 0x77, 0x5a,
		0x65, 0x72, 0x6f, 0xc3, 0x87, 0xa3, 0x5a, 0x69, 0x64, 0x04,
		0xab, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x47, 0x6f, 0x4e, 0x61,
		0x6d, 0x65, 0xa7, 0x4d, 0x79, 0x53, 0x6c, 0x69, 0x63, 0x65,
		0xac, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x54, 0x61, 0x67, 0x4e,
		0x61, 0x6d, 0x65, 0xa7, 0x4d, 0x79, 0x53, 0x6c, 0x69, 0x63,
		0x65, 0xac, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x54, 0x79, 0x70,
		0x65, 0x53, 0x74, 0x72, 0xa8, 0x5b, 0x5d, 0x73, 0x74, 0x72,
		0x69, 0x6e, 0x67, 0xad, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x43,
		0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x1a, 0xad, 0x46,
		0x69, 0x65, 0x6c, 0x64, 0x46, 0x75, 0x6c, 0x6c, 0x54, 0x79,
		0x70, 0x65, 0x83, 0xa4, 0x4b, 0x69, 0x6e, 0x64, 0x1a, 0xa3,
		0x53, 0x74, 0x72, 0xa5, 0x53, 0x6c, 0x69, 0x63, 0x65, 0xa6,
		0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x82, 0xa4, 0x4b, 0x69,
		0x6e, 0x64, 0x02, 0xa3, 0x53, 0x74, 0x72, 0xa6, 0x73, 0x74,
		0x72, 0x69, 0x6e, 0x67, 0xa8, 0x53, 0x68, 0x6f, 0x77, 0x5a,
		0x65, 0x72, 0x6f, 0xc3, 0xa1, 0x41, 0x82, 0xaa, 0x53, 0x74,
		0x72, 0x75, 0x63, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0xa1, 0x41,
		0xa6, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x96, 0x87, 0xa3,
		0x5a, 0x69, 0x64, 0x00, 0xab, 0x46, 0x69, 0x65, 0x6c, 0x64,
		0x47, 0x6f, 0x4e, 0x61, 0x6d, 0x65, 0xa4, 0x4e, 0x61, 0x6d,
		0x65, 0xac, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x54, 0x61, 0x67,
		0x4e, 0x61, 0x6d, 0x65, 0xa4, 0x6e, 0x61, 0x6d, 0x65, 0xac,
		0x46, 0x69, 0x65, 0x6c, 0x64, 0x54, 0x79, 0x70, 0x65, 0x53,
		0x74, 0x72, 0xa6, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0xad,
		0x46, 0x69, 0x65, 0x6c, 0x64, 0x43, 0x61, 0x74, 0x65, 0x67,
		0x6f, 0x72, 0x79, 0x17, 0xae, 0x46, 0x69, 0x65, 0x6c, 0x64,
		0x50, 0x72, 0x69, 0x6d, 0x69, 0x74, 0x69, 0x76, 0x65, 0x02,
		0xad, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x46, 0x75, 0x6c, 0x6c,
		0x54, 0x79, 0x70, 0x65, 0x82, 0xa4, 0x4b, 0x69, 0x6e, 0x64,
		0x02, 0xa3, 0x53, 0x74, 0x72, 0xa6, 0x73, 0x74, 0x72, 0x69,
		0x6e, 0x67, 0x87, 0xa3, 0x5a, 0x69, 0x64, 0x01, 0xab, 0x46,
		0x69, 0x65, 0x6c, 0x64, 0x47, 0x6f, 0x4e, 0x61, 0x6d, 0x65,
		0xa4, 0x42, 0x64, 0x61, 0x79, 0xac, 0x46, 0x69, 0x65, 0x6c,
		0x64, 0x54, 0x61, 0x67, 0x4e, 0x61, 0x6d, 0x65, 0xa4, 0x42,
		0x64, 0x61, 0x79, 0xac, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x54,
		0x79, 0x70, 0x65, 0x53, 0x74, 0x72, 0xa9, 0x74, 0x69, 0x6d,
		0x65, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0xad, 0x46, 0x69, 0x65,
		0x6c, 0x64, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79,
		0x17, 0xae, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x50, 0x72, 0x69,
		0x6d, 0x69, 0x74, 0x69, 0x76, 0x65, 0x14, 0xad, 0x46, 0x69,
		0x65, 0x6c, 0x64, 0x46, 0x75, 0x6c, 0x6c, 0x54, 0x79, 0x70,
		0x65, 0x82, 0xa4, 0x4b, 0x69, 0x6e, 0x64, 0x14, 0xa3, 0x53,
		0x74, 0x72, 0xa4, 0x54, 0x69, 0x6d, 0x65, 0x88, 0xa3, 0x5a,
		0x69, 0x64, 0x02, 0xab, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x47,
		0x6f, 0x4e, 0x61, 0x6d, 0x65, 0xa5, 0x50, 0x68, 0x6f, 0x6e,
		0x65, 0xac, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x54, 0x61, 0x67,
		0x4e, 0x61, 0x6d, 0x65, 0xa5, 0x70, 0x68, 0x6f, 0x6e, 0x65,
		0xac, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x54, 0x79, 0x70, 0x65,
		0x53, 0x74, 0x72, 0xa6, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67,
		0xad, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x43, 0x61, 0x74, 0x65,
		0x67, 0x6f, 0x72, 0x79, 0x17, 0xae, 0x46, 0x69, 0x65, 0x6c,
		0x64, 0x50, 0x72, 0x69, 0x6d, 0x69, 0x74, 0x69, 0x76, 0x65,
		0x02, 0xad, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x46, 0x75, 0x6c,
		0x6c, 0x54, 0x79, 0x70, 0x65, 0x82, 0xa4, 0x4b, 0x69, 0x6e,
		0x64, 0x02, 0xa3, 0x53, 0x74, 0x72, 0xa6, 0x73, 0x74, 0x72,
		0x69, 0x6e, 0x67, 0xa9, 0x4f, 0x6d, 0x69, 0x74, 0x45, 0x6d,
		0x70, 0x74, 0x79, 0xc3, 0x88, 0xa3, 0x5a, 0x69, 0x64, 0x03,
		0xab, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x47, 0x6f, 0x4e, 0x61,
		0x6d, 0x65, 0xa4, 0x53, 0x69, 0x62, 0x73, 0xac, 0x46, 0x69,
		0x65, 0x6c, 0x64, 0x54, 0x61, 0x67, 0x4e, 0x61, 0x6d, 0x65,
		0xa4, 0x53, 0x69, 0x62, 0x73, 0xac, 0x46, 0x69, 0x65, 0x6c,
		0x64, 0x54, 0x79, 0x70, 0x65, 0x53, 0x74, 0x72, 0xa3, 0x69,
		0x6e, 0x74, 0xad, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x43, 0x61,
		0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x17, 0xae, 0x46, 0x69,
		0x65, 0x6c, 0x64, 0x50, 0x72, 0x69, 0x6d, 0x69, 0x74, 0x69,
		0x76, 0x65, 0x0d, 0xad, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x46,
		0x75, 0x6c, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x82, 0xa4, 0x4b,
		0x69, 0x6e, 0x64, 0x0d, 0xa3, 0x53, 0x74, 0x72, 0xa3, 0x69,
		0x6e, 0x74, 0xa9, 0x4f, 0x6d, 0x69, 0x74, 0x45, 0x6d, 0x70,
		0x74, 0x79, 0xc3, 0x87, 0xa3, 0x5a, 0x69, 0x64, 0x04, 0xab,
		0x46, 0x69, 0x65, 0x6c, 0x64, 0x47, 0x6f, 0x4e, 0x61, 0x6d,
		0x65, 0xa3, 0x47, 0x50, 0x41, 0xac, 0x46, 0x69, 0x65, 0x6c,
		0x64, 0x54, 0x61, 0x67, 0x4e, 0x61, 0x6d, 0x65, 0xa3, 0x47,
		0x50, 0x41, 0xac, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x54, 0x79,
		0x70, 0x65, 0x53, 0x74, 0x72, 0xa7, 0x66, 0x6c, 0x6f, 0x61,
		0x74, 0x36, 0x34, 0xad, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x43,
		0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x17, 0xae, 0x46,
		0x69, 0x65, 0x6c, 0x64, 0x50, 0x72, 0x69, 0x6d, 0x69, 0x74,
		0x69, 0x76, 0x65, 0x04, 0xad, 0x46, 0x69, 0x65, 0x6c, 0x64,
		0x46, 0x75, 0x6c, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x82, 0xa4,
		0x4b, 0x69, 0x6e, 0x64, 0x04, 0xa3, 0x53, 0x74, 0x72, 0xa7,
		0x66, 0x6c, 0x6f, 0x61, 0x74, 0x36, 0x34, 0x87, 0xa3, 0x5a,
		0x69, 0x64, 0x05, 0xab, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x47,
		0x6f, 0x4e, 0x61, 0x6d, 0x65, 0xa6, 0x46, 0x72, 0x69, 0x65,
		0x6e, 0x64, 0xac, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x54, 0x61,
		0x67, 0x4e, 0x61, 0x6d, 0x65, 0xa6, 0x46, 0x72, 0x69, 0x65,
		0x6e, 0x64, 0xac, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x54, 0x79,
		0x70, 0x65, 0x53, 0x74, 0x72, 0xa4, 0x62, 0x6f, 0x6f, 0x6c,
		0xad, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x43, 0x61, 0x74, 0x65,
		0x67, 0x6f, 0x72, 0x79, 0x17, 0xae, 0x46, 0x69, 0x65, 0x6c,
		0x64, 0x50, 0x72, 0x69, 0x6d, 0x69, 0x74, 0x69, 0x76, 0x65,
		0x12, 0xad, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x46, 0x75, 0x6c,
		0x6c, 0x54, 0x79, 0x70, 0x65, 0x82, 0xa4, 0x4b, 0x69, 0x6e,
		0x64, 0x12, 0xa3, 0x53, 0x74, 0x72, 0xa4, 0x62, 0x6f, 0x6f,
		0x6c, 0xa7, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x92,
		0xd9, 0x25, 0x22, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e,
		0x63, 0x6f, 0x6d, 0x2f, 0x67, 0x6c, 0x79, 0x63, 0x65, 0x72,
		0x69, 0x6e, 0x65, 0x2f, 0x67, 0x72, 0x65, 0x65, 0x6e, 0x70,
		0x61, 0x63, 0x6b, 0x2f, 0x6d, 0x73, 0x67, 0x70, 0x22, 0xa6,
		0x22, 0x74, 0x69, 0x6d, 0x65, 0x22,
	}
}

// MSGPZebraSchemaInJsonCompact provides the ZebraPack Schema in compact JSON format, length 4394 bytes
func (FileMy_msgp) MSGPZebraSchemaInJsonCompact() []byte {
	return []byte(`{"SourcePath":"testdata/my.go","SourcePackage":"testdata","ZebraSchemaId":1947397430155838,"Structs":{"Sys":{"StructName":"Sys","Fields":[{"Zid":0,"FieldGoName":"F","FieldTagName":"F","FieldTypeStr":"interface{}","FieldCategory":23,"FieldPrimitive":19,"FieldFullType":{"Kind":19,"Str":"Intf"}}]},"S2":{"StructName":"S2","Fields":[{"Zid":0,"FieldGoName":"A","FieldTagName":"alpha","Skip":true},{"Zid":1,"FieldGoName":"B","FieldTagName":"beta","FieldTypeStr":"string","FieldCategory":23,"FieldPrimitive":2,"FieldFullType":{"Kind":2,"Str":"string"}},{"Zid":2,"FieldGoName":"R","FieldTagName":"ralph","FieldTypeStr":"map[string]uint8","FieldCategory":24,"FieldFullType":{"Kind":24,"Str":"Map","Domain":{"Kind":2,"Str":"string"},"Range":{"Kind":8,"Str":"uint8"}}},{"Zid":3,"FieldGoName":"P","FieldTagName":"P","FieldTypeStr":"uint16","FieldCategory":23,"FieldPrimitive":9,"FieldFullType":{"Kind":9,"Str":"uint16"},"Deprecated":true},{"Zid":4,"FieldGoName":"Q","FieldTagName":"Q","FieldTypeStr":"uint32","FieldCategory":23,"FieldPrimitive":10,"FieldFullType":{"Kind":10,"Str":"uint32"}},{"Zid":5,"FieldGoName":"T","FieldTagName":"T","FieldTypeStr":"int64","FieldCategory":23,"FieldPrimitive":17,"FieldFullType":{"Kind":17,"Str":"int64"},"ShowZero":true},{"Zid":6,"FieldGoName":"Arr","FieldTagName":"arr","FieldTypeStr":"[msgp.ExtensionPrefixSize]float64","FieldCategory":27,"FieldFullType":{"Kind":27,"Str":"Array","Domain":{"Kind":6,"Str":"msgp.ExtensionPrefixSize"},"Range":{"Kind":4,"Str":"float64"}}},{"Zid":7,"FieldGoName":"MyTree","FieldTagName":"MyTree","FieldTypeStr":"*Tree","FieldCategory":28,"FieldFullType":{"Kind":28,"Str":"Pointer","Domain":{"Kind":22,"Str":"Tree"}}}]},"Tree":{"StructName":"Tree","Fields":[{"Zid":0,"FieldGoName":"Chld","FieldTagName":"Chld","FieldTypeStr":"[]Tree","FieldCategory":26,"FieldFullType":{"Kind":26,"Str":"Slice","Domain":{"Kind":22,"Str":"Tree"}}},{"Zid":1,"FieldGoName":"Str","FieldTagName":"Str","FieldTypeStr":"string","FieldCategory":23,"FieldPrimitive":2,"FieldFullType":{"Kind":2,"Str":"string"}},{"Zid":2,"FieldGoName":"Par","FieldTagName":"Par","FieldTypeStr":"*S2","FieldCategory":28,"FieldFullType":{"Kind":28,"Str":"Pointer","Domain":{"Kind":22,"Str":"S2"}}}]},"Big":{"StructName":"Big","Fields":[{"Zid":0,"FieldGoName":"Slice","FieldTagName":"Slice","FieldTypeStr":"[]S2","FieldCategory":26,"FieldFullType":{"Kind":26,"Str":"Slice","Domain":{"Kind":22,"Str":"S2"}},"ShowZero":true},{"Zid":1,"FieldGoName":"Transform","FieldTagName":"Transform","FieldTypeStr":"map[int]*S2","FieldCategory":24,"FieldFullType":{"Kind":24,"Str":"Map","Domain":{"Kind":13,"Str":"int"},"Range":{"Kind":28,"Str":"Pointer","Domain":{"Kind":22,"Str":"S2"}}},"ShowZero":true},{"Zid":2,"FieldGoName":"Myptr","FieldTagName":"Myptr","FieldTypeStr":"*S2","FieldCategory":28,"FieldFullType":{"Kind":28,"Str":"Pointer","Domain":{"Kind":22,"Str":"S2"}},"ShowZero":true},{"Zid":3,"FieldGoName":"Myarray","FieldTagName":"Myarray","FieldTypeStr":"[3]string","FieldCategory":27,"FieldFullType":{"Kind":27,"Str":"Array","Domain":{"Kind":3,"Str":"3"},"Range":{"Kind":2,"Str":"string"}},"ShowZero":true},{"Zid":4,"FieldGoName":"MySlice","FieldTagName":"MySlice","FieldTypeStr":"[]string","FieldCategory":26,"FieldFullType":{"Kind":26,"Str":"Slice","Domain":{"Kind":2,"Str":"string"}},"ShowZero":true}]},"A":{"StructName":"A","Fields":[{"Zid":0,"FieldGoName":"Name","FieldTagName":"name","FieldTypeStr":"string","FieldCategory":23,"FieldPrimitive":2,"FieldFullType":{"Kind":2,"Str":"string"}},{"Zid":1,"FieldGoName":"Bday","FieldTagName":"Bday","FieldTypeStr":"time.Time","FieldCategory":23,"FieldPrimitive":20,"FieldFullType":{"Kind":20,"Str":"Time"}},{"Zid":2,"FieldGoName":"Phone","FieldTagName":"phone","FieldTypeStr":"string","FieldCategory":23,"FieldPrimitive":2,"FieldFullType":{"Kind":2,"Str":"string"},"OmitEmpty":true},{"Zid":3,"FieldGoName":"Sibs","FieldTagName":"Sibs","FieldTypeStr":"int","FieldCategory":23,"FieldPrimitive":13,"FieldFullType":{"Kind":13,"Str":"int"},"OmitEmpty":true},{"Zid":4,"FieldGoName":"GPA","FieldTagName":"GPA","FieldTypeStr":"float64","FieldCategory":23,"FieldPrimitive":4,"FieldFullType":{"Kind":4,"Str":"float64"}},{"Zid":5,"FieldGoName":"Friend","FieldTagName":"Friend","FieldTypeStr":"bool","FieldCategory":23,"FieldPrimitive":18,"FieldFullType":{"Kind":18,"Str":"bool"}}]}},"Imports":["\"github.com/glycerine/greenpack/msgp\"","\"time\""]}`)
}

// MSGPZebraSchemaInJsonPretty provides the ZebraPack Schema in pretty JSON format, length 12276 bytes
func (FileMy_msgp) MSGPZebraSchemaInJsonPretty() []byte {
	return []byte(`{
    "SourcePath": "testdata/my.go",
    "SourcePackage": "testdata",
    "ZebraSchemaId": 1947397430155838,
    "Structs": {
        "Sys": {
            "StructName": "Sys",
            "Fields": [
                {
                    "Zid": 0,
                    "FieldGoName": "F",
                    "FieldTagName": "F",
                    "FieldTypeStr": "interface{}",
                    "FieldCategory": 23,
                    "FieldPrimitive": 19,
                    "FieldFullType": {
                        "Kind": 19,
                        "Str": "Intf"
                    }
                }
            ]
        },
        "S2": {
            "StructName": "S2",
            "Fields": [
                {
                    "Zid": 0,
                    "FieldGoName": "A",
                    "FieldTagName": "alpha",
                    "Skip": true
                },
                {
                    "Zid": 1,
                    "FieldGoName": "B",
                    "FieldTagName": "beta",
                    "FieldTypeStr": "string",
                    "FieldCategory": 23,
                    "FieldPrimitive": 2,
                    "FieldFullType": {
                        "Kind": 2,
                        "Str": "string"
                    }
                },
                {
                    "Zid": 2,
                    "FieldGoName": "R",
                    "FieldTagName": "ralph",
                    "FieldTypeStr": "map[string]uint8",
                    "FieldCategory": 24,
                    "FieldFullType": {
                        "Kind": 24,
                        "Str": "Map",
                        "Domain": {
                            "Kind": 2,
                            "Str": "string"
                        },
                        "Range": {
                            "Kind": 8,
                            "Str": "uint8"
                        }
                    }
                },
                {
                    "Zid": 3,
                    "FieldGoName": "P",
                    "FieldTagName": "P",
                    "FieldTypeStr": "uint16",
                    "FieldCategory": 23,
                    "FieldPrimitive": 9,
                    "FieldFullType": {
                        "Kind": 9,
                        "Str": "uint16"
                    },
                    "Deprecated": true
                },
                {
                    "Zid": 4,
                    "FieldGoName": "Q",
                    "FieldTagName": "Q",
                    "FieldTypeStr": "uint32",
                    "FieldCategory": 23,
                    "FieldPrimitive": 10,
                    "FieldFullType": {
                        "Kind": 10,
                        "Str": "uint32"
                    }
                },
                {
                    "Zid": 5,
                    "FieldGoName": "T",
                    "FieldTagName": "T",
                    "FieldTypeStr": "int64",
                    "FieldCategory": 23,
                    "FieldPrimitive": 17,
                    "FieldFullType": {
                        "Kind": 17,
                        "Str": "int64"
                    },
                    "ShowZero": true
                },
                {
                    "Zid": 6,
                    "FieldGoName": "Arr",
                    "FieldTagName": "arr",
                    "FieldTypeStr": "[msgp.ExtensionPrefixSize]float64",
                    "FieldCategory": 27,
                    "FieldFullType": {
                        "Kind": 27,
                        "Str": "Array",
                        "Domain": {
                            "Kind": 6,
                            "Str": "msgp.ExtensionPrefixSize"
                        },
                        "Range": {
                            "Kind": 4,
                            "Str": "float64"
                        }
                    }
                },
                {
                    "Zid": 7,
                    "FieldGoName": "MyTree",
                    "FieldTagName": "MyTree",
                    "FieldTypeStr": "*Tree",
                    "FieldCategory": 28,
                    "FieldFullType": {
                        "Kind": 28,
                        "Str": "Pointer",
                        "Domain": {
                            "Kind": 22,
                            "Str": "Tree"
                        }
                    }
                }
            ]
        },
        "Tree": {
            "StructName": "Tree",
            "Fields": [
                {
                    "Zid": 0,
                    "FieldGoName": "Chld",
                    "FieldTagName": "Chld",
                    "FieldTypeStr": "[]Tree",
                    "FieldCategory": 26,
                    "FieldFullType": {
                        "Kind": 26,
                        "Str": "Slice",
                        "Domain": {
                            "Kind": 22,
                            "Str": "Tree"
                        }
                    }
                },
                {
                    "Zid": 1,
                    "FieldGoName": "Str",
                    "FieldTagName": "Str",
                    "FieldTypeStr": "string",
                    "FieldCategory": 23,
                    "FieldPrimitive": 2,
                    "FieldFullType": {
                        "Kind": 2,
                        "Str": "string"
                    }
                },
                {
                    "Zid": 2,
                    "FieldGoName": "Par",
                    "FieldTagName": "Par",
                    "FieldTypeStr": "*S2",
                    "FieldCategory": 28,
                    "FieldFullType": {
                        "Kind": 28,
                        "Str": "Pointer",
                        "Domain": {
                            "Kind": 22,
                            "Str": "S2"
                        }
                    }
                }
            ]
        },
        "Big": {
            "StructName": "Big",
            "Fields": [
                {
                    "Zid": 0,
                    "FieldGoName": "Slice",
                    "FieldTagName": "Slice",
                    "FieldTypeStr": "[]S2",
                    "FieldCategory": 26,
                    "FieldFullType": {
                        "Kind": 26,
                        "Str": "Slice",
                        "Domain": {
                            "Kind": 22,
                            "Str": "S2"
                        }
                    },
                    "ShowZero": true
                },
                {
                    "Zid": 1,
                    "FieldGoName": "Transform",
                    "FieldTagName": "Transform",
                    "FieldTypeStr": "map[int]*S2",
                    "FieldCategory": 24,
                    "FieldFullType": {
                        "Kind": 24,
                        "Str": "Map",
                        "Domain": {
                            "Kind": 13,
                            "Str": "int"
                        },
                        "Range": {
                            "Kind": 28,
                            "Str": "Pointer",
                            "Domain": {
                                "Kind": 22,
                                "Str": "S2"
                            }
                        }
                    },
                    "ShowZero": true
                },
                {
                    "Zid": 2,
                    "FieldGoName": "Myptr",
                    "FieldTagName": "Myptr",
                    "FieldTypeStr": "*S2",
                    "FieldCategory": 28,
                    "FieldFullType": {
                        "Kind": 28,
                        "Str": "Pointer",
                        "Domain": {
                            "Kind": 22,
                            "Str": "S2"
                        }
                    },
                    "ShowZero": true
                },
                {
                    "Zid": 3,
                    "FieldGoName": "Myarray",
                    "FieldTagName": "Myarray",
                    "FieldTypeStr": "[3]string",
                    "FieldCategory": 27,
                    "FieldFullType": {
                        "Kind": 27,
                        "Str": "Array",
                        "Domain": {
                            "Kind": 3,
                            "Str": "3"
                        },
                        "Range": {
                            "Kind": 2,
                            "Str": "string"
                        }
                    },
                    "ShowZero": true
                },
                {
                    "Zid": 4,
                    "FieldGoName": "MySlice",
                    "FieldTagName": "MySlice",
                    "FieldTypeStr": "[]string",
                    "FieldCategory": 26,
                    "FieldFullType": {
                        "Kind": 26,
                        "Str": "Slice",
                        "Domain": {
                            "Kind": 2,
                            "Str": "string"
                        }
                    },
                    "ShowZero": true
                }
            ]
        },
        "A": {
            "StructName": "A",
            "Fields": [
                {
                    "Zid": 0,
                    "FieldGoName": "Name",
                    "FieldTagName": "name",
                    "FieldTypeStr": "string",
                    "FieldCategory": 23,
                    "FieldPrimitive": 2,
                    "FieldFullType": {
                        "Kind": 2,
                        "Str": "string"
                    }
                },
                {
                    "Zid": 1,
                    "FieldGoName": "Bday",
                    "FieldTagName": "Bday",
                    "FieldTypeStr": "time.Time",
                    "FieldCategory": 23,
                    "FieldPrimitive": 20,
                    "FieldFullType": {
                        "Kind": 20,
                        "Str": "Time"
                    }
                },
                {
                    "Zid": 2,
                    "FieldGoName": "Phone",
                    "FieldTagName": "phone",
                    "FieldTypeStr": "string",
                    "FieldCategory": 23,
                    "FieldPrimitive": 2,
                    "FieldFullType": {
                        "Kind": 2,
                        "Str": "string"
                    },
                    "OmitEmpty": true
                },
                {
                    "Zid": 3,
                    "FieldGoName": "Sibs",
                    "FieldTagName": "Sibs",
                    "FieldTypeStr": "int",
                    "FieldCategory": 23,
                    "FieldPrimitive": 13,
                    "FieldFullType": {
                        "Kind": 13,
                        "Str": "int"
                    },
                    "OmitEmpty": true
                },
                {
                    "Zid": 4,
                    "FieldGoName": "GPA",
                    "FieldTagName": "GPA",
                    "FieldTypeStr": "float64",
                    "FieldCategory": 23,
                    "FieldPrimitive": 4,
                    "FieldFullType": {
                        "Kind": 4,
                        "Str": "float64"
                    }
                },
                {
                    "Zid": 5,
                    "FieldGoName": "Friend",
                    "FieldTagName": "Friend",
                    "FieldTypeStr": "bool",
                    "FieldCategory": 23,
                    "FieldPrimitive": 18,
                    "FieldFullType": {
                        "Kind": 18,
                        "Str": "bool"
                    }
                }
            ]
        }
    },
    "Imports": [
        "\"github.com/glycerine/greenpack/msgp\"",
        "\"time\""
    ]
}`)
}
